---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Justin.
--- DateTime: 5/31/2020 11:33 PM
---

ACTION_BOARD_BUTTON_HEIGHT = 0.0
TOTAL_WORKERS_PER_PLAYER = 12
COLOR_RED = {r=1,g=0,b=0}
COLOR_GREEN = {r=0,g=1,b=0}
MIN_PLAYERS = 1
MAX_PLAYERS = 4
NUM_STARTING_OCCS = 1

actionBoardGUIDs = {
    '996bfd',
    'f288e0',
    '910994',
    '0e15f5',
}

meadGUIDs = {
    ['Purple'] ='e140cd',
    ['Blue'] ='8c1ce4',
    ['Green'] ='14a1d2',
    ['Red'] ='b3b33a',
}

homeBoards = {}

workers = {
    Purple={},
    Blue={},
    Green={},
    Red={}
}

solo_GUIDs = {
'42e1c8',
'1a6abf',
'278897',
'945d49',
'5e8673',
'0ec7c9',
'cd4519',
'754793',
'f0b6c8',
'61a196',
'36bb49',
}
tSoloPawns = {}




-- State to be restored after an undo
state = {
    version = 2.2,
    isWorkerAvailable = {
        Purple = {},
        Blue = {},
        Green = {},
        Red = {}
    },
    currentRound = 0,
    actionBoardState = 1,
    usingAutoDeal = true,
    jobDeckGUID = '',
    weaponDeckGUID = '',
    numRounds = 7,
}

numPlayers = 2
norwegiansEnabled = false
miniExpansion1Enabled = false
usingDeckA = true
usingDeckB = false
usingDeckC = false
usingCustomDeck = false
usingActionButtons = true
usingAllIslands = false
usingAdvent = false
usingBanList = false  --remove the banned cards
usingReccList = false --remove the recommended cards
usingIslandShuffle = false
usingHarvestIsland = false --Isle of Mull from harvest mini-expansion

usingHarvestResources = false --not set by a button, set based on other options
gameLengthState = 1 --1 = full game, 2 = base short game, 3 = harvest short game.
maxGameLengthState = 3 --future-proofing for eventual expansions.

seatedPlayers = {}

function getActionBoardIndex(guid)
    for i,v in ipairs(actionBoardGUIDs) do
        if guid == v then
            return i
        end
    end

    return -1
end

function onObjectSpawned(object)
    local actionBoardIndex = getActionBoardIndex(object.guid)
    if actionBoardIndex ~= -1 then
        state.actionBoardState = actionBoardIndex
        createActionButtons()
    end
end

function onload(saved_data)
    --Due to TTS bugginess, the hand zones gradually rise in y-value over time. Lock them into place here.
    Player['Purple'].setHandTransform({position = Vector(-48.43, 6.00, -2.42),rotation=Vector(0,90,0),scale=Vector(8.04, 6.00, 2.85),})
    Player['Blue'].setHandTransform({position = Vector(-14.29, 6.00, -38.23),rotation=Vector(0.00, 360, 0.00),scale=Vector(8.04, 6.00, 2.85),})
    Player['Green'].setHandTransform({position = Vector(20.49, 6.00, -38.23),rotation=Vector(0.00, 360, 0.00),scale=Vector(8.04, 6.00, 2.85),})
    Player['Red'].setHandTransform({position = Vector(55.80, 6.00, -2.36),rotation=Vector(0.00, 270, 0.00),scale=Vector(8.04, 6.00, 2.85),})

    math.randomseed(os.time())

    --get workers
    for color, guidList in pairs(worker_GUIDs) do
        for i, guid in ipairs(guidList) do
            workers[color][i] = getObjectFromGUID(guid)
            setWorkerAvailable(color, i, i <= getNumStartWorkers())
        end
    end

    --Solo pawns
    for i,v in ipairs(solo_GUIDs) do
        tSoloPawns[i]=getObjectFromGUID(v)
    end

    --home boards
    homeBoards['Purple'] = getObjectFromGUID('85c969')
    homeBoards['Blue'] = getObjectFromGUID('c52e5a')
    homeBoards['Green'] = getObjectFromGUID('74941a')
    homeBoards['Red'] = getObjectFromGUID('037bf4')

    --harvest mini-expansion bag
    harvestBag = getObjectFromGUID('569bee')

    --galileo expansion bag
    galBag = getObjectFromGUID('81e5b5')

    if saved_data ~= "" and saved_data ~= nil then
        local newState = JSON.decode(saved_data)
        if newState.version == nil or newState.version < state.version then
            broadcastToAll('State out of date.  It will be created from scratch.')
        else
            state = newState
        end
    end

    if state.currentRound == 0 then
        createSetupButtons()
    else
        createActionButtons()
    end

    masterJobsDeck = getObjectFromGUID(state.jobDeckGUID)
    swordDeck = getObjectFromGUID(state.weaponDeckGUID)

    updateSeatedPlayers()
end

function onSave()
    return JSON.encode(state)
end

function onPlayerChangeColor()
    updateSeatedPlayers()
end

function startGame(object, color)
    if getNumPlayers() < 1 then
        broadcastToAll('Make sure all players are seated before starting\n[i](click your name in the corner and press "Change Color")[/i]')
        return
    end

    numPlayers = getNumPlayers()

    destroySetupButtons()
    setupPlayerBoards()
    setupActionBoard()
    setupExplorationBoards()
    setupMountains()
    setupSpecialTiles()
    setupArtisanSheds()
    setupGalileoHouses()
    setupJobDecks()
    setupInitialResources()
    setupOppor()
    setupRandomHarvests()
    setupResourceMarkers()
    broadcastSetup()
    setupStartPlayer()

    --TODO: Create a function that destroys unnecessary objects.
    getObjectFromGUID('912af0').destruct() --notecard informing players they can unlock their home boards.

    --TODO: Switch everything over to Wait.condition instead of Wait.time.
    --Each set-up function should set a flag when finished, and the game will start once all flags are true.
    Wait.time(function() startNewRound() end, 1.5)
end

function updateSeatedPlayers()
    seatedPlayers = {}
    if Player["Red"].seated then seatedPlayers[#seatedPlayers+1] = "Red" end
    if Player["Blue"].seated then seatedPlayers[#seatedPlayers+1] = "Blue" end
    if Player["Green"].seated then seatedPlayers[#seatedPlayers+1] = "Green" end
    if Player["Purple"].seated then seatedPlayers[#seatedPlayers+1] = "Purple" end

    if state.currentRound == 0 then
        updateSetupButtons()
    end

end

function getNumPlayers()
    return #seatedPlayers
end

function getNumStartWorkers()
    return TOTAL_WORKERS_PER_PLAYER - state.numRounds
end

function setupPlayerBoards()
    if state.numRounds == 6 then
        for color,board in pairs(homeBoards) do
            homeBoards[color].setLock(false)
            homeBoards[color].flip()
            Wait.condition(function() homeBoards[color].setLock(true) end, function() return homeBoards[color].resting end)
        end
    end
end

extensionTileGUIDs = {'2dd414', 'ea6dee'}

function setupActionBoard()
    local originalActionBoard = getActionBoard()

    -- Hide extension tile for 1-3 players, or randomly flip them for 4 players
    local useExtension = (numPlayers == 4) and (not norwegiansEnabled)
    for i,guid in ipairs(extensionTileGUIDs) do
        local extensionTile = getObjectFromGUID(guid)
        if useExtension then
            if math.random(2) == 2 then extensionTile.flip() end
        else
            destroyObject(extensionTile)
        end
    end

    -- If Norwegians is active, set the board state appropriately
    if norwegiansEnabled then
        -- State 2 is 4-player, State 3 is 3-player, State 4 is 1- or 2-player
        state.actionBoardState = 2
        if numPlayers < 3 then
            state.actionBoardState = 4
        elseif numPlayers == 3 then
            state.actionBoardState = 3
        end
        originalActionBoard.setState(state.actionBoardState)
    else
        -- Create the action buttons here.  We're not changing state so onObjectSpawned won't fire
        createActionButtons()
    end
end

miniExpansion1ExplorationBoardGUIDs = {
    'cdf9b1',
    '4f79ad',
}

baseExplorationBoardGUIDs = {
    '15d0ed',
    'd62e9b',
    'e2186a',
    '2c7a52',
}

norwegiansExplorationBoardGUIDs = {
    '362852',
    '87a481',
    '3df5a3',
    '7b3016',
}

--for use with island shuffle
norwegiansRevisedBaseGUIDs = {
    '6708fb',
    '6e5f41',
    'd44f11',
    '800a42',
}

function setupExplorationBoards()
    -- Hide Lofoten and Tierra del Fuego if we're not using miniExpansion1
    if not miniExpansion1Enabled then
        for i,v in ipairs(miniExpansion1ExplorationBoardGUIDs) do
            destroyObject(getObjectFromGUID(v))
        end
    else
        local t={{-21.65, 1.16, 17.16},{26.65, 1.16, 17.16}}
        for i,v in ipairs(miniExpansion1ExplorationBoardGUIDs) do
            getObjectFromGUID(v).setPositionSmooth(t[i], false, true)
        end
    end

    if usingHarvestIsland then
        harvestBag.takeObject({guid='41d87e', position={-0.67, 1.21, 25.50}, rotation={0,180,0}})
        if not usingIslandShuffle then usingHarvestResources=true end
        --Island shuffle might mean we're not using the island even if its selected
    end

    if usingGalIsland then
        galBag.takeObject({guid='73f59c', position={6.07, 1.20, 25.50}, rotation={0,180,0}})
    end

    if not norwegiansEnabled then
        -- Hide the Norwegians boards if we're not using Norwegians
        for i,v in ipairs(norwegiansExplorationBoardGUIDs) do
            destroyObject(getObjectFromGUID(v))
        end
    else
        if usingAllIslands or usingIslandShuffle or numPlayers == 4 then
            -- Use the revised versions of the base islands
            for i,v in ipairs(baseExplorationBoardGUIDs) do
                getObjectFromGUID(v).setState(2)
            end
        elseif numPlayers == 3 then
            -- If there are 3 players, we hide one of the "A" or "B" base tiles,
            -- and also hide one of the "C" or "D" tiles
            local ABIndexToHide = math.random(2)
            local ABIndexToShow = 3 - ABIndexToHide
            local CDIndexToHide = math.random(2) + 2
            local CDIndexToShow = 5 - CDIndexToHide + 2

            destroyObject(getObjectFromGUID(baseExplorationBoardGUIDs[ABIndexToHide]))
            destroyObject(getObjectFromGUID(baseExplorationBoardGUIDs[CDIndexToHide]))

            getObjectFromGUID(baseExplorationBoardGUIDs[ABIndexToShow]).setState(2)
            getObjectFromGUID(baseExplorationBoardGUIDs[CDIndexToShow]).setState(2)
        else
            -- This is a 1 or 2 player Norwegians game without all islands enabled,
            -- so get rid of the base game tiles
            for i,v in ipairs(baseExplorationBoardGUIDs) do
                destroyObject(getObjectFromGUID(v))
            end
        end
    end

    if usingIslandShuffle then
        Wait.time(performIslandShuffle, 1)
    else
        --destroy the discard bag and shuffle bag
        getObjectFromGUID('fd731f').destruct()
        getObjectFromGUID('c0d2b5').destruct()
    end

end

islandLetters = {
    ['Shetland / Bear Island']='A',
    ['Faroe Islands / Baffin Island']='B',
    ['Iceland / Labrador']='C',
    ['Greenland / Newfoundland']='D',
    ['Isle of Man / Limerick']='A',
    ['Isle of Skye / Wexford']='B',
    ['Outer Hebrides / Cork']='C',
    ['Islay / Waterford']='D',
    ['Lofoten / Orkney']='A',
    ['Tierra del Fuego']='Special',
    ['Isle of Mull / Caithness']='Special',
    ['Scariff & Deenish / Svalbard']='B',
}

islandPositions = {
    ['A'] = {{-14.65, 1.16, 13.66},{-14.65, 1.16, 20.66}},
    ['B'] = {{-7.65, 1.16, 13.66},{-7.65, 1.16, 20.66}},
    ['C'] = {{12.65, 1.16, 13.66},{12.65, 1.16, 20.66}},
    ['D'] = {{19.65, 1.16, 13.66},{19.65, 1.16, 20.66}},
}

function performIslandShuffle()
    --find which islands exist and put them into the bag
    local sBag = getObjectFromGUID('c0d2b5')
    --Mini-Expansion 1
    for i,v in ipairs(miniExpansion1ExplorationBoardGUIDs) do
        local currIsland = getObjectFromGUID(v)
        if currIsland then sBag.putObject(currIsland) end
    end

    --Norwegians islands
    for i,v in ipairs(norwegiansExplorationBoardGUIDs) do
        local currIsland = getObjectFromGUID(v)
        if currIsland then sBag.putObject(currIsland) end
    end

    --Base game, unrevised
    for i,v in ipairs(baseExplorationBoardGUIDs) do
        local currIsland = getObjectFromGUID(v)
        if currIsland then sBag.putObject(currIsland) end
    end

    --Base game, revised
    for i,v in ipairs(norwegiansRevisedBaseGUIDs) do
        local currIsland = getObjectFromGUID(v)
        if currIsland then sBag.putObject(currIsland) end
    end

    --Harvest Island
    local currIsland = getObjectFromGUID('41d87e')
    if currIsland then sBag.putObject(currIsland) end

    --Galileo Island
    local currIsland = getObjectFromGUID('73f59c')
    if currIsland then sBag.putObject(currIsland) end

    --shuffle bag
    sBag.shuffle()

    --get maximum islands based on player count
    local count = {['A']=2, ['B']=2, ['C']=2, ['D']=2}
    if (numPlayers<4) then
        if (numPlayers==1 or numPlayers==2) then
            count = {['A']=1, ['B']=1, ['C']=1, ['D']=1}
        else
            --3 player, randomly remove A or B, randomly remove C or D
            count[tableChooseRandom({'A', 'B'})] = 1
            count[tableChooseRandom({'C', 'D'})] = 1
        end
    end

    local discardBag = getObjectFromGUID('fd731f')
    while sBag.getQuantity()>0 do
        --get island
        local currIsland = sBag.takeObject({rotation={0,180,0}})
        local name = currIsland.getName()
        local letter = islandLetters[name]

        --check for special letters, like Tierra del Fuego (only one for now)
        if letter=='Special' then
            if (name=='Tierra del Fuego') then letter = tableChooseRandom({'C','D'}) end
            if (name=='Isle of Mull / Caithness') then
                letter='B'
                --logic for using berries and Altar tile
                if count[letter]>0 then usingHarvestResources=true else usingHarvestIsland=false end
            end
        end

        --check to see if island should be placed
        if count[letter]>0 then
            --place island
            currIsland.setPositionSmooth(islandPositions[letter][count[letter]], false, false)
            --decrement count
            count[letter] = count[letter] - 1
        else
            --discard island
            discardBag.putObject(currIsland)
        end
    end

    sBag.destruct()
end

function tableChooseRandom(table)
    --returns a random element from the table
    --only works for tables with numbered indices starting from 1
    return table[math.random(#table)]
end

mountainBagGUID = '750771'

function setupMountains()
    getObjectFromGUID(mountainBagGUID).call('setup')
end

specialTileMovementForNorwegians = {
    {guid='b9bfbd', pos={19.53, 1.46, -2.29}, isNorwegians=false}, -- helmet
    {guid='0b4301', pos={21.34, 1.46, -1.59}, isNorwegians=false}, -- crucifix
    {guid='b1ba5b', pos={22.81, 1.46, -2.12}, isNorwegians=true},  -- sword
    {guid='414a6a', pos={24.54, 1.46, -2.31}, isNorwegians=true},  -- sickle
    {guid='4479b9', pos={20.92, 1.46, -3.58}, isNorwegians=false}, -- cane
    {guid='d71f53', pos={23.71, 1.45, -3.82}, isNorwegians=true},  -- skillet
    {guid='e847df', pos={19.36, 1.46, 8.20}, isNorwegians=false}, -- necklace
    {guid='9a1b1d', pos={23.36, 1.45, 2.61}, isNorwegians=false}, -- E-shaped thing
    {guid='8d48fc', pos={24.41, 1.45, 4.28}, isNorwegians=false}, -- hammer
    {guid='46ba63', pos={19.77, 1.46, 6.16}, isNorwegians=true},  -- scales
    {guid='36ea09', pos={25.75, 1.45, 3.10}, isNorwegians=false}, -- horseshoe
    {guid='e29cff', pos={26.98, 1.45, 5.21}, isNorwegians=false}, -- axe
    {guid='2f1c87', pos={21.13, 1.45, 2.38}, isNorwegians=true},  -- chainmail
    {guid='fc3453', pos={21.96, 1.45, 4.87}, isNorwegians=true},  -- anvil
    {guid='4a47a8', pos={18.40, 1.46, 3.98}, isNorwegians=false}, -- English Crown
    {guid='9e68f5', pos={17.59, 1.46, 6.67}, isNorwegians=false},  -- Shield
    {guid='1c4ceb', pos={21.46, 1.46, 7.25}, isNorwegians=false},  -- Belt
    {guid='06eb43', pos={21.46, 1.46, 8.75}, isNorwegians=false},  -- Game Piece
    {guid='50db66', pos={23.54, 1.46, 8.79}, isNorwegians=false},  -- Horn
    {guid='06780d', pos={23.80, 1.45, 7.10}, isNorwegians=false},  -- Brooch
    {guid='54573b', pos={25.82, 1.45, 7.69}, isNorwegians=false},  -- Cup
}

specialTileMovementForAdvent = {
    {guid='20cc92', pos={26.55, 1.26, 10.71}}, --Sleigh
    {guid='478ab9', pos={29.74, 1.26, 11.57}}, --Tree
    {guid='4a5c95', pos={30.40, 1.26, 10.02}}, --Skis
    {guid='7c5c52', pos={29.57, 1.26, 8.07}}, --Table
    {guid='59dd31', pos={29.51, 1.26, 6.83}}, --Skates
}

function setupSpecialTiles()
    if not norwegiansEnabled then
        -- If we're not using the Norwegians expansion, just get rid of the extra tile board
        destroyObject(getObjectFromGUID('dfc41f'))

        for i,v in ipairs(specialTileMovementForNorwegians) do
            if v.isNorwegians then destroyObject(getObjectFromGUID(v.guid)) end
        end
    else
        -- If we are using the expansion, change the main board to the side without snap points,
        -- and move the appropriate tiles to the secondary tile board
        getObjectFromGUID('9c35fb').setState(2)

        local norwegiansBag = getObjectFromGUID(norwegiansBagGUID)
        for i,v in ipairs(specialTileMovementForNorwegians) do
            getObjectFromGUID(v.guid).setPosition(v.pos)
        end
    end

    if usingAdvent then
        local adventBag = getObjectFromGUID('fff4fd')
        for i,v in ipairs(specialTileMovementForAdvent) do
            adventBag.takeObject({guid=v.guid, position=v.pos, rotation={0,180,0}})
        end
    end

end

function setupArtisanSheds()
    local artisanShedBag = getObjectFromGUID('cd6153')
    if norwegiansEnabled then
        artisanShedBag.shuffle()

        if usingDraftSheds then
            for i=0,1 do
                for j=0,2 do
                    artisanShedBag.takeObject({rotation={0,180,0}, position={37.59+7.5*i, 1.15, 15.45-3*j}})
                end
            end
        else
            dealToAllPlayers(1, artisanShedBag)
        end
    else
        artisanShedBag.destruct()
    end
end

function setupGalileoHouses()
    if usingHouses then

        --remove basic sheds
        getObjectFromGUID('ca70ed').destruct()
        getObjectFromGUID('993898').destruct()
        getObjectFromGUID('d79e74').destruct()

        --place supply bags
        local shedBag = nil
        local stoneHBag = nil
        local longHBag = nil

        shedBag = galBag.takeObject({guid='aebe99', position={28.19, 0.97, 0.81}})
        if norwegiansEnabled then
            stoneHBag = galBag.takeObject({guid='ef2300', position={28.19, 0.97, -1.85}})
        else
            stoneHBag = galBag.takeObject({guid='9f7dd0', position={28.19, 0.97, -1.85}})
        end
        longHBag = galBag.takeObject({guid='94905b', position={28.19, 0.97, -4.50}})

        Wait.time(function()
            --shuffle supply bags
            shedBag.shuffle()
            stoneHBag.shuffle()
            longHBag.shuffle()

            --draw two houses of each type
            shedBag.takeObject({position={18.21, 1.15, -7.42}, rotation={0,180,0}})
            shedBag.takeObject({position={25.58, 1.15, -7.42}, rotation={0,180,0}})
            stoneHBag.takeObject({position={18.21, 1.15, -10.57}, rotation={0,180,0}})
            stoneHBag.takeObject({position={25.58, 1.15, -10.57}, rotation={0,180,0}})
            longHBag.takeObject({position={18.21, 1.15, -13.69}, rotation={0,180,0}})
            longHBag.takeObject({position={25.58, 1.15, -13.69}, rotation={0,180,0}})
        end, 1)
    end
end

masterJobsDeckStarter = nil
masterJobsDeck = nil

function moveOrDestroyJobsDecks(shouldUse, deckBag)
    local startingJobDeckHolderPosition = getObjectFromGUID('242428').getPosition()
    startingJobDeckHolderPosition.y = startingJobDeckHolderPosition.y + 1
    local jobDeckHolderPosition = getObjectFromGUID('40fc38').getPosition()
    jobDeckHolderPosition.y = jobDeckHolderPosition.y + 1

    local startingJobsDeck = deckBag.takeObject({rotation={0,180,180}})
    local jobsDeck = deckBag.takeObject({rotation={0,180,180}})

    if shouldUse then
        --if this is the first used deck, it should be the one that takes in the other decks and the one that gets shuffled
        if (masterJobsDeck==nil) then
            startingJobsDeck.setPosition(startingJobDeckHolderPosition, false, true)
            jobsDeck.setPosition(jobDeckHolderPosition, false, true)

            masterJobsDeckStarter = startingJobsDeck
            masterJobsDeck = jobsDeck
            state.jobDeckGUID = masterJobsDeck.guid
        else
            masterJobsDeckStarter.putObject(startingJobsDeck)
            masterJobsDeck.putObject(jobsDeck)
        end
    else
        destroyObject(startingJobsDeck)
        destroyObject(jobsDeck)
    end
end

function setupJobDecks()
    local bagGUID = 'fe3393'
    local deckBagBag = getObjectFromGUID('690a0b')

    if norwegiansEnabled then
        if not usingBanList then
            if getNumPlayers() == 4 then bagGUID = '23522b'
            elseif getNumPlayers() == 3 then bagGUID = '185c22'
            else bagGUID = '724acc' end
        else
            --We are using the small ban list or the small+large ban list
            if not usingReccList then
                if (getNumPlayers() > 2) then bagGUID = 'ecbefd'
                else bagGUID = '371220' end
            else
                if (getNumPlayers() > 2) then bagGUID = '4c6a54'
                else bagGUID = '6941e7' end
            end
        end

    end

    local deckBag = deckBagBag.takeObject({guid=bagGUID})
    local customDeckBag = getObjectFromGUID('b26ec6')

    --TODO: Use group() and wait conditions instead of wait.time and physically moving decks.
    Wait.time(function() moveOrDestroyJobsDecks(usingDeckA, deckBag) end, 0.1)
    Wait.time(function() moveOrDestroyJobsDecks(usingDeckB, deckBag) end, 0.2)
    Wait.time(function() moveOrDestroyJobsDecks(usingDeckC, deckBag) end, 0.3)
    if #customDeckBag.getObjects() == 2 then
        Wait.time(function() moveOrDestroyJobsDecks(usingCustomDeck, customDeckBag) end, 0.4)
    end
    Wait.time(shuffleJobsDecks, 0.75)
    Wait.time(dealStartingJobs, 1)
    Wait.time(function() destroyObject(deckBag) destroyObject(deckBagBag) destroyObject(customDeckBag) end, 2)
end

function shuffleJobsDecks()
    if(masterJobsDeck ~= nil) then
        masterJobsDeckStarter.shuffle()
        masterJobsDeck.shuffle()
    end
end

function dealStartingJobs()
    if(masterJobsDeckStarter ~= nil) then
        if NUM_STARTING_OCCS*getNumPlayers() > masterJobsDeckStarter.getQuantity() then
            local s = math.floor(masterJobsDeckStarter.getQuantity()/getNumPlayers())
            dealToAllPlayers(s, masterJobsDeckStarter)
        else
            dealToAllPlayers(NUM_STARTING_OCCS, masterJobsDeckStarter)
        end

        --Base game, harvest, short game set-up: Deal 2 normal occupations to each player.
        if not norwegiansEnabled and gameLengthState == 3 then
            dealToAllPlayers(2, masterJobsDeck)
        end
    end
end

bowDeck = nil
spearDeck = nil
snareDeck = nil
swordDeck = nil

function setupInitialResources()
    bowDeck = getObjectFromGUID('e37910')
    spearDeck = getObjectFromGUID('b5a15d')
    snareDeck = getObjectFromGUID('397e8e')
    swordDeck = getObjectFromGUID('e65482')

    dealToAllPlayers(1, bowDeck)
    dealToAllPlayers(1, spearDeck)
    dealToAllPlayers(1, snareDeck)

    Wait.time(createWeaponDeck, 0.25)

    --Deal money to each player for Harvest short game.
    if gameLengthState == 3 then
        local coinBag = getObjectFromGUID('2053e0')
        for color,v in pairs(meadGUIDs) do
            local obj = getObjectFromGUID(v)
            local pos = nil
            if obj then
                --place coins on mead
                pos = obj.getPosition()
            else
                --player deleted the mead, place the coins on their home board.
                pos = homeBoards[color].getPosition()
            end
            --coins are scattered semi-randomly, for aesthetic appeal.
            coinBag.takeObject({position = pos+Vector(math.random()/2-0.25,0.2,math.random()/2-0.25)})
            coinBag.takeObject({position = pos+Vector(math.random()/2-0.25,0.4,math.random()/2-0.25)})
            coinBag.takeObject({position = pos+Vector(math.random()/2-0.25,0.6,math.random()/2-0.25)})
        end
    end

    --Harvest check. Use harvest goods if a) Island exists or b) harvest token option was selected.
    -- Use altar if Island exists
    Wait.time(function()
            usingHarvestResources = usingHarvestResources or usingDraftHarvest

            if usingHarvestResources then
                --1x1 tiles
                harvestBag.takeObject({guid='6d58db', position={10.55, 1.14, 3.66}, rotation={0,90,0}})
                harvestBag.takeObject({guid='5ee42c', position={13.39, 1.14, 3.66}, rotation={0,90,0}})
            end
            if usingHarvestIsland then
                --altar
                local tPos = {}
                if usingAdvent then tPos = {27.58, 1.20, 12.27} else tPos = {26.46, 1.20, 9.82} end
                harvestBag.takeObject({guid='3fe7a8', position=tPos, rotation={0,180,0}})
            end
        end
    , 3)
end

function createWeaponDeck()
    local weaponDeckPos = bowDeck.getPosition()
    bowDeck.flip()
    spearDeck.flip()
    spearDeck.setPosition(weaponDeckPos)
    snareDeck.flip()
    snareDeck.setPosition(weaponDeckPos)
    swordDeck.flip()
    Wait.time(function() swordDeck.setPosition(weaponDeckPos) end, 0.75)
    Wait.time(function() swordDeck.shuffle() end, 1)
    state.weaponDeckGUID = swordDeck.guid

    --If harvest short game, deal each player a random weapon.
    if gameLengthState ==3 then
        Wait.time(function() dealToAllPlayers(1, swordDeck) end, 1.25)
    end
end

function setupOppor()
    if usingOppor then
        getObjectFromGUID('81e5b5').takeObject({guid='33536d', position={-6.63, 0.97, 7.05}, callback_function = function(obj) obj.shuffle() end })
    end
end

function setupRandomHarvests()
    if usingRHarvests then
        local tilebag = getObjectFromGUID('569bee').takeObject({guid='35cf6b'})
        local r = math.random(0,3)
        tilebag.takeObject({index=r, rotation={0,180,180}, position={-11.94, 1.46+1.4, 7.07}})
        tilebag.shuffle()
        for i=0,6 do
            tilebag.takeObject({rotation={0,180,180}, position={-11.94, 1.46+0.2*i, 7.07}})
        end
        tilebag.destruct()
    end
end

function setupResourceMarkers()
    if usingDraftHarvest then
        local tilebag = getObjectFromGUID('569bee').takeObject({guid='92c45f'})
        for i=0,4 do
            for j=0,1 do
                tilebag.takeObject({rotation={0,180,0}, position={35.19+3*i, 1.15, 21.45-3*j}})
            end
        end
        tilebag.destruct()
    end
end

function broadcastSetup()
    if usingDraftHarvest or (usingDraftSheds and norwegiansEnabled) or (gameLengthState == 3 and not norwegiansEnabled) then
        broadcastToAll('Finish Set-Up, see Chat Window', {r=1, g=0, b=0})
        if usingDraftHarvest then
            if gameLengthState == 1 then
                printToAll('-Each player takes a Resource Marker in reverse turn-order.\n')
            elseif gameLengthState == 2 or gameLengthState == 3 then
                printToAll("-Each player takes a Resource Marker in reverse turn-order, then each player takes a 2nd marker in the same order.\n")
            end
        end
        if usingDraftSheds and norwegiansEnabled then
            if gameLengthState == 1 then
                printToAll("-Each player takes an Artisan Shed in reverse turn-order. It must be built before using it.\n")
            elseif gameLengthState == 2 or gameLengthState == 3 then
                printToAll("-Each player takes and builds an Artisan Shed (either side) for free in reverse turn-order.\n")
            end
        end
        if (gameLengthState == 3 and not norwegiansEnabled) then
            printToAll('-Each player keeps one of the non-starter [i](brown)[/i] occupation cards and discards the other.\n-At the beginning of their first turn, they may play the kept non-starter occupation card for free.\n')
        end
    end
end

function setupStartPlayer()
    local startPlayerIndex = math.random(getNumPlayers())
    broadcastToAll(seatedPlayers[startPlayerIndex] .. ' is the start player')
    getObjectFromGUID('20778c').deal(1, seatedPlayers[startPlayerIndex])
end

function destroySetupButtons()
    for i,v in pairs(setupButtons) do
        destroyObject(getObjectFromGUID(v.guid))
    end
end

function dealToAllPlayers(numToDeal, container)
    for i,v in ipairs(seatedPlayers) do
        container.deal(numToDeal, v)
    end
end

function dealToPlayer(color, numToDeal, container)
    container.deal(numToDeal, color)
end

function getActionBoard()
    return getObjectFromGUID(actionBoardGUIDs[state.actionBoardState])
end

function setWorkerAvailable(color, index, isAvailable)
    if state.isWorkerAvailable[color] == nil then
        return
    end

    state.isWorkerAvailable[color][index] = isAvailable
end

function isWorkerAvailable(color, index)
    if index > TOTAL_WORKERS_PER_PLAYER or index < 1 then
        return false
    end

    return state.isWorkerAvailable[color][index]
end

function getFirstAvailableWorkerIndex(color)
    if workers[color] == nil then
        return nil
    end

    for i,v in ipairs(workers[color]) do
        if isWorkerAvailable(color, i) then
            return i
        end
    end

    return nil
end

function getActionButton(actionName)
    local button = actionButtons[state.actionBoardState][actionName]
    if button == nil then
        button = opportunities[actionName]
    end
    return button
end

columnTooltips = {
    '',
    '',
    '\n\n(Also take an occupation card)',
    '\n\n(Also play an occupation card)',
    '\n\n(You may not place any more workers this round.  If you placed 2 workers on this space, play an occupation card.)',
}

function getColumnTooltip(column)
    return columnTooltips[column]
end

function createActionButtons()
    if usingActionButtons then
        local actionBoard = getActionBoard()
        local buttonInfo = actionButtons[state.actionBoardState]

        for i,v in pairs(buttonInfo) do
            actionBoard.createButton({
                click_function=i,
                position={v.board[1], ACTION_BOARD_BUTTON_HEIGHT, v.board[3]},
                width=v.width,
                height=v.height,
                tooltip=v.tooltip..getColumnTooltip(v.column)
                })
        end

        actionBoard.createButton({
            click_function='returnLastWorker',
            position={-0.25, 0.05, -1.20},
            width=250,
            height=100,
            font_size=24,
            label="Return last worker",
            tooltip='Return the last worker you played to your worker pool'
            })

        actionBoard.createButton({
            click_function='startNewRound',
            position={0.25, 0.05, -1.20},
            width=250,
            height=100,
            font_size=24,
            label="Start Round",
            tooltip='Return all workers to their pools, and add a new worker from the banquet hall'
            })
    end
end

function canUseActionSpace(numWorkers, color)
    firstAvailable = getFirstAvailableWorkerIndex(color)

    if firstAvailable == nil then
        return false
    end

    return isWorkerAvailable(color, firstAvailable + numWorkers - 1)
end

function getNumWorkersToMoveToAction(actionName, color)
    local button = getActionButton(actionName)

    local column = button.column
    if column < 5 then
        return column
    else
        -- You may place 1 or 2 workers in the fifth columns.  Since you can't place more workers
        -- once you've used the fifth column, assume the player will use two workers unless they
        -- only have one left
        if isWorkerAvailable(color, getFirstAvailableWorkerIndex(color) + 1) then
            return 2
        else
            return 1
        end
    end
end

function moveWorkersToAction(actionName, color)
    if state.currentRound == 0 then
        broadcastToColor('Press \'Start Round\' to begin', color)
        return false
    end

    local WORKER_WIDTH = 0.66
    local offsets = {
        {{0,0,0}},
        {{-0.5,0,0}, {0.5,0,0}},
        {{-0.75,0,0}, {0,0,0}, {0.75,0,0}},
        {{-0.5,0,-0.5},{0.5,0,-0.5},{-0.5,0,0.5},{0.5,0,0.5}}
    }

    local numWorkers = getNumWorkersToMoveToAction(actionName, color)
    if canUseActionSpace(numWorkers, color) then
        local button = getActionButton(actionName)
        local board = getActionBoard()
        if button.guid ~= nil then
            board = getObjectFromGUID(button.guid)
        end
        local buttonPos = board.positionToWorld({-button.board[1], button.board[2], button.board[3]}) -- HACK: Not sure why I need to negate the X component, but doing so makes this work.  Much easier than having to add the "global" value for each button
        local offset = offsets[numWorkers]
        local firstAvailable = getFirstAvailableWorkerIndex(color)
        local lastNeeded = firstAvailable + numWorkers - 1

        for i=firstAvailable,lastNeeded do
            local curOffset = offset[i - firstAvailable + 1]
            local position = {buttonPos[1] + curOffset[1] * WORKER_WIDTH, buttonPos[2] + curOffset[2] * WORKER_WIDTH, buttonPos[3] + curOffset[3] * WORKER_WIDTH}
            worker = workers[color][i]
            worker.setPositionSmooth(position, false, true)
            worker.setRotationSmooth({0,90,0}, false, true)
            setWorkerAvailable(color, i, false)
        end
        return true
    else
        broadcastToColor('Not enough workers left', color, COLOR_RED)
        return false
    end
end

function getWorkerPoolPosition(color, index)
    local workersThisRound = getNumStartWorkers() + state.currentRound
    local anglePerWorker = math.pi * 2.0 / workersThisRound
    local angleForWorker = (index - 1) * anglePerWorker
    --When upside down, the worker position needs to be flipped.
    local flip = sign(homeBoards[color].getRotation().z-90)
    local poolCenter = homeBoards[color].positionToWorld({flip*1.12/4.79, 0, 0.47/4.79})
    local CIRCLE_RADIUS = 1.5
    local DROP_HEIGHT = 1.5

    local x = poolCenter[1] + CIRCLE_RADIUS * math.cos(angleForWorker)
    local y = DROP_HEIGHT
    local z = poolCenter[3] + CIRCLE_RADIUS * math.sin(angleForWorker)

    return {x,y,z}
end

function sign(x)
  return x>0 and 1 or x<0 and -1 or 0
end

function returnWorker(color, index)
    local worker = workers[color][index]
    local poolPosition = getWorkerPoolPosition(color, index)
    worker.setPositionSmooth(poolPosition, false, true)
    worker.setRotation({0,0,0}, false, true)
    setWorkerAvailable(color, index, true)
end

function returnLastWorker(object, color)
    local firstAvailableWorkerIndex = getFirstAvailableWorkerIndex(color)

    if firstAvailableWorkerIndex == 1 then
        broadcastToColor('No workers to return', color, COLOR_RED)
        return
    end

    local lastPlayedWorkerIndex = state.currentRound + getNumStartWorkers()
    if firstAvailableWorkerIndex ~= nil then
        lastPlayedWorkerIndex = firstAvailableWorkerIndex - 1
    end

    returnWorker(color, lastPlayedWorkerIndex)
end

--TODO: The new round function should only consider players who are seated, in case the players decide to delete the unused colors.
function startNewRound()
    if state.currentRound == state.numRounds then
        broadcastToAll('Game over', COLOR_GREEN)
        return
    end

    state.currentRound = state.currentRound + 1
    broadcastToAll('Starting Round ' .. state.currentRound, COLOR_GREEN)

    local numWorkers = getNumStartWorkers() + state.currentRound

    for color, workerList in pairs(workers) do
        for workerIndex=1,numWorkers do

            --SOLO IMPLEMENTATION
            if (Player[color].seated) and (getNumPlayers() == 1) and (state.currentRound~=1) and (workerIndex~=numWorkers) then
                local thisWorker = workers[color][workerIndex]
                tSoloPawns[workerIndex].setRotation(thisWorker.getRotation())
                tSoloPawns[workerIndex].setPositionSmooth(thisWorker.getPosition(), false, true)
            end

            returnWorker(color, workerIndex)
        end
    end
    if state.usingAutoDeal then dealToAllPlayers(1, swordDeck) end
end

worker_GUIDs = {
    Purple = {
        '4a5490',
        'c50422',
        '2d7b5f',
        'a28b34',
        'b11653',
        'aded46',
        '8e044b',
        'ad2768',
        '85250c',
        '1a5602',
        '73a451',
        'a7334e'
    },
    Blue = {
        'cf622e',
        '95edaa',
        'b44730',
        '55add3',
        '957622',
        '72d7d0',
        '5d7ac1',
        '7a27a5',
        'b78df4',
        'dfe8fd',
        '79bd32',
        '0154dd'
    },
    Green = {
        '1bb52d',
        'f947de',
        'becbfd',
        'df34f6',
        '8b7f1b',
        'e5922a',
        'bfd794',
        'a7fb10',
        'ec8520',
        '3ac4de',
        '7e4fb2',
        'c4e387'
    },
    Red = {
        'cc8303',
        'c2b5ef',
        '96d2f3',
        '7233db',
        'ae0c09',
        'dd57d6',
        'ef1a44',
        'c83947',
        '2ea593',
        'b5eeaa',
        'f7a6e1',
        '3f6160'
    }
}

-- Setup button data
SETUP_BUTTON_X = 2.0
SETUP_BUTTON_Y = 2.0
SETUP_BUTTON_WIDTH = 3000
SETUP_BUTTON_HEIGHT = 1000
SETUP_BUTTON_FONT_SIZE = 100

function createSetupButtons()
    for i,v in pairs(setupButtons) do
        local locator = getObjectFromGUID(v.guid)
        local buttonColor = v.color
        if buttonColor == nil then
            buttonColor = {r=1, g=1, b=1}
        end
        local buttonTip = ''
        if v.tooltip ~= nil then buttonTip = v.tooltip end

        locator.createButton({
            click_function=v.action,
            position={0.0, 0.2, 0.0},
            rotation={0.0, 180.0, 0.0},
            width=v.width,
            height=v.height,
            label=v.text,
            font_size=300,
            color=buttonColor,
            tooltip = buttonTip
        })
    end

    updateSetupButtons()
end

function playerCountButtonClicked(object, color)
    broadcastToColor('Player count will update automatically as players are seated\n[i](click your name in the corner and press "Change Color")[/i]', color)
end

function toggleNorwegians(object, color)
    norwegiansEnabled = not norwegiansEnabled
    updateSetupButtons()
end

function toggleMiniExpansion1(object, color)
    miniExpansion1Enabled = not miniExpansion1Enabled
    updateSetupButtons()
end

function toggleDeckA(object, color)
    usingDeckA = not usingDeckA
    updateSetupButtons()
end

function toggleDeckB(object, color)
    usingDeckB = not usingDeckB
    updateSetupButtons()
end

function toggleDeckC(object, color)
    usingDeckC = not usingDeckC
    updateSetupButtons()
end

function toggleCustomDeck(object, color)
    usingCustomDeck = not usingCustomDeck
    updateSetupButtons()
end

function toggleActionButtons(object, color)
    usingActionButtons = not usingActionButtons
    updateSetupButtons()
end

function toggleUseAllIslands(object, color)
    usingAllIslands = not usingAllIslands
    updateSetupButtons()
end

function toggleGalileoMountains(object, color)
    galileoMountainsEnabled = not galileoMountainsEnabled
    updateSetupButtons()
end

function toggleUseAdvent(object, color)
    usingAdvent = not usingAdvent
    updateSetupButtons()
end

function toggleBanList(object, color)
    --three-state toggle

    if not usingBanList then
        usingBanList = true
        updateSetupButtons()
        return
    end

    if not usingReccList then
        usingReccList = true
        updateSetupButtons()
        return
    end

    usingBanList = false
    usingReccList = false
    updateSetupButtons()
end

function toggleUseIslandShuffle(object, color)
    usingIslandShuffle = not usingIslandShuffle
    updateSetupButtons()
end

function toggleUseHarvestIsland(object,color)
    usingHarvestIsland = not usingHarvestIsland
    updateSetupButtons()
end

function toggleAutoDeal(object, color)
    state.usingAutoDeal = not state.usingAutoDeal
    updateSetupButtons()
end

function toggleGalIsland(object, color)
    usingGalIsland = not usingGalIsland
    updateSetupButtons()
end

function toggleUseHouses(object, color)
    usingHouses = not usingHouses
    updateSetupButtons()
end

function toggleOppor(object, color)
    usingOppor = not usingOppor
    updateSetupButtons()
end

function toggleStartingOccs(object, color, alt)
    if alt then
        NUM_STARTING_OCCS = math.max(0, NUM_STARTING_OCCS-1)
    else
        NUM_STARTING_OCCS = NUM_STARTING_OCCS + 1
    end
    updateSetupButtons()
end

function toggleRound()
    --state.numRounds = (state.numRounds - 5) % 2 + 6
    gameLengthState = gameLengthState + 1
    if gameLengthState > maxGameLengthState then gameLengthState = 1 end

    if gameLengthState == 1 then --full game
        state.numRounds = 7
    elseif gameLengthState == 2 then --base short
        state.numRounds = 6
    elseif gameLengthState == 3 then -- harvest short
        state.numRounds = 6
    end
    setGameLengthOptions()
    updateSetupButtons()
end

function setGameLengthOptions()
    --If the game is anything other than a full length game, set any appropriate options.
    --This needs to be called every time gameLengthState changes, but also when another option would affect this such as toggling on or off Norwegians.
    if gameLengthState == 3 then
        usingDraftHarvest = true
        usingDraftSheds = true
    else
        usingDraftHarvest = false
        usingDraftSheds = false
    end
end

function toggleRHarvests()
    usingRHarvests = not usingRHarvests
    updateSetupButtons()
end

function toggleDraftHarvest()
    usingDraftHarvest = not usingDraftHarvest
    updateSetupButtons()
end

function toggleDraftSheds()
    usingDraftSheds = not usingDraftSheds
    updateSetupButtons()
end

function empty(object, color)
end

function updateSetupButtons()
    setButtonText('playerCount', 'Number of players: ' .. #seatedPlayers)

    if norwegiansEnabled then
        setButtonText('norwegians', 'Norwegians [X]')
    else
        setButtonText('norwegians', 'Norwegians [ ]')
    end

    if miniExpansion1Enabled then
        setButtonText('miniExpansion1', 'Mini Expansion 1 [X]')
    else
        setButtonText('miniExpansion1', 'Mini Expansion 1 [ ]')
    end

    if usingDeckA then
        setButtonText('useDeckA', 'Use Deck A [X]')
    else
        setButtonText('useDeckA', 'Use Deck A [ ]')
    end

    if usingDeckB then
        setButtonText('useDeckB', 'Use Deck B [X]')
    else
        setButtonText('useDeckB', 'Use Deck B [ ]')
    end

    if usingDeckC then
        setButtonText('useDeckC', 'Use Deck C [X]')
    else
        setButtonText('useDeckC', 'Use Deck C [ ]')
    end

    if usingCustomDeck then
        setButtonText('useCustomDeck', 'Use Custom Deck [X]')
    else
        setButtonText('useCustomDeck', 'Use Custom Deck [ ]')
    end

    if usingActionButtons then
        setButtonText('createActionSpaceButtons', 'Action Buttons [X]')
    else
        setButtonText('createActionSpaceButtons', 'Action Buttons [ ]')
    end

    if usingAllIslands then
        setButtonText('useAllIslands', 'Use All Islands [X]\nfrom Base Game')
    else
        setButtonText('useAllIslands', 'Use All Islands [ ]\nfrom Base Game')
    end

    if usingAdvent then
        setButtonText('useAdvent', 'Use Advent [X]\nSpecial Tiles')
    else
        setButtonText('useAdvent', 'Use Advent [ ]\nSpecial Tiles')
    end

    if usingBanList then
        if usingReccList then
            setButtonText('useBan', 'Ban List: Large')
        else
            setButtonText('useBan', 'Ban List: Small')
        end
    else
        setButtonText('useBan', 'Ban List: None')
    end

    if usingIslandShuffle then
        setButtonText('useIslandShuffle', 'Shuffle Islands [X]')
    else
        setButtonText('useIslandShuffle', 'Shuffle Islands [ ]')
    end

    if usingHarvestIsland then
        setButtonText('useHarvestIsland', 'Use Island [X]')
    else
        setButtonText('useHarvestIsland', 'Use Island [ ]')
    end

    if galileoMountainsEnabled then
        setButtonText('galileoMountains', 'Mountain Strips [X]')
    else
        setButtonText('galileoMountains', 'Mountain Strips [ ]')
    end

    if state.usingAutoDeal then
        setButtonText('autoDeal', 'Auto Dealing [X]')
    else
        setButtonText('autoDeal', 'Auto Dealing [ ]')
    end

    if usingGalIsland then
        setButtonText('useGalIsland', 'Use Island [X]')
    else
        setButtonText('useGalIsland', 'Use Island [ ]')
    end

    if usingHouses then
        setButtonText('useHouses', 'Use Houses [X]')
    else
        setButtonText('useHouses', 'Use Houses [ ]')
    end

    if usingOppor then
        setButtonText('useOppor', 'Opportunities [X]')
    else
        setButtonText('useOppor', 'Opportunities [ ]')
    end

    setButtonText('useTwo', 'Starting Occs: ' .. NUM_STARTING_OCCS)

    if usingRHarvests then
        setButtonText('useRHarvests', 'Random Harvests [X]')
    else
        setButtonText('useRHarvests', 'Random Harvests [ ]')
    end

    if usingDraftHarvest then
        setButtonText('useDraftHarvest', 'Resource Markers [X]')
    else
        setButtonText('useDraftHarvest', 'Resource Markers [ ]')
    end

    if usingDraftSheds then
        setButtonText('useDraftSheds', 'Draft Sheds [X]')
    else
        setButtonText('useDraftSheds', 'Draft Sheds [ ]')
    end

    if gameLengthState == 1 then
        setButtonText('rounds', 'Full 7-Round Game')
    elseif gameLengthState == 2 then
        setButtonText('rounds', 'Base 6-Round Game')
    elseif gameLengthState == 3 then
        setButtonText('rounds', 'Harvest 6-Round Game')
    end

end

function setButtonText(buttonName, text)
    local locator = getObjectFromGUID(setupButtons[buttonName].guid)
    locator.editButton({index=0, label=text})
end

setupButtons = {
    playerCount={guid='6f8a91', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='playerCountButtonClicked'},
    norwegians={guid='2495b2', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleNorwegians'},
    miniExpansion1={guid='d3b995', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleMiniExpansion1', tooltip = 'Include Lofoten and Tierra del Fuego'},
    start={guid='e20c6e', width=SETUP_BUTTON_WIDTH*1.5, height=SETUP_BUTTON_HEIGHT, text='Start Game', action='startGame', color={r=0, g=0.75, b=0}},
    useDeckA={guid='148a02', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleDeckA'},
    useDeckB={guid='c7fec0', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleDeckB'},
    useDeckC={guid='0bd44e', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleDeckC'},
    useCustomDeck={guid='f17532', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleCustomDeck', tooltip = 'Use a custom occupation deck, in additon to or instead of the A/B/C decks depending on options selected. In the provided bag, place the deck of non-starting occupations in first and then the deck of starting occupations [i](if you "search" the bag, the starting occupations should be listed first)[/i]. '},
    createActionSpaceButtons={guid='245923', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleActionButtons', tooltip = 'Create buttons for place/returning workers and starting a new round. Adds descriptions to each action space.'},
    useAllIslands={guid='b9a854', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleUseAllIslands', tooltip = '1-3 player Norwegians games do not normally use all of the base game islands. \n[i](Automatically selected if shuffling islands)[/i]'},
    useAdvent={guid='8db996', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleUseAdvent', tooltip='Include 5 new special tiles that can be obtained through raiding and purchasing'},
    useBan={guid='f8ecf4', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleBanList', tooltip='The Norwegians designer has created a list of occupations that are either too weak or too strong when playing with The Norwegians. This button removes either a small set of 8 cards or a larger set of 30 cards chosen from all three decks. See the Harvest rulebook for a complete list.'},
    useIslandShuffle={guid='25927c', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleUseIslandShuffle', tooltip='Randomly use two islands per player, selected from the islands available based on the other options chosen. Ensures at least one "A", "B", "C", and "D" and no more than two of any letter.'},
    useHarvestIsland={guid='7f5a88', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleUseHarvestIsland', tooltip='Include Isle of Mull / Caithness'},
    galileoMountains={guid='f6ad7f', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleGalileoMountains', tooltip='Include 2 new mountain strip tiles'},
    autoDeal={guid='593e1b', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleAutoDeal', tooltip='Automatically deal weapon and occupation cards when appropriate. Only works with the Action Buttons option.'},
    useGalIsland={guid='bc6a9f', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleGalIsland', tooltip='Include Scariff & Deenish / Svalbard'},
    useHouses={guid='729367', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleUseHouses', tooltip='Randomize the available houses. Two of each type [i](Shed, Stone, and Long)[/i] are available at any given time. Removes the three original Sheds from the game.'},
    useOppor={guid='f59978', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleOppor', tooltip='Set out the bag of Opportunity Tiles and shuffle it [i](there are many ways to use these tiles, so further setup is at your discretion. See Galileo\'s rulebook for various options)[/i]'},
    useTwo={guid='302ff5', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleStartingOccs', tooltip='Deal this many starting occupations to each player [i](for example, to pick one and discard the rest)[/i].\n\nRight-click to reduce the amount.'},
    rounds={guid='73d7a6', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleRound', tooltip='Choose between the full length game, the short game as described in the original rules, or the short game with additional set-up as described in Harvest.'},
    useRHarvests={guid='e1523f', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleRHarvests', tooltip='Randomly and secretly decide which harvest occurs in which round, as described in the Harvest rulebook.\n\nThe shuffled stack is placed on the round summary board.'},
    useDraftHarvest={guid='73342a', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleDraftHarvest', tooltip='Lay out the Resource Markers so that the players may pick from them.'},
    useDraftSheds={guid='04a8af', width=SETUP_BUTTON_WIDTH, height=SETUP_BUTTON_HEIGHT, action='toggleDraftSheds', tooltip='[i](If Norwegians is enabled)[/i]\nLay out the Norwegians Sheds so that the players may pick from them.'},
}

-- Action button data
actionButtons = {
{   -- Base board
    houses1={board={-0.25,0.0,-0.86}, width=100, height=50, column=1, tooltip='Spend 2 wood to take a Shed'},
    houses2={board={-0.05,0.0,-0.86}, width=100, height=50, column=2, tooltip='Spend 1 stone to take a Stone House'},
    houses3={board={0.16,0.0,-0.86}, width=100, height=50, column=3, tooltip='Spend 2 stone to take a Long House'},
    houses4={board={0.37,0.0,-0.82}, width=110, height=100, column=4, tooltip='Spend 2 stone and 2 wood to do ONE of the following:\n\n- Take a Stone House and a Longship\n\n- Take a Long House and a Knarr'},

    ships1={board={-0.25,0.0,-0.76}, width=100, height=50, column=1, tooltip='Spend 1 wood to take a Whaling Boat'},
    ships2={board={-0.05,0.0,-0.76}, width=100, height=50, column=2, tooltip='Spend 2 wood to take a Knarr'},
    ships3={board={0.16,0.0,-0.76}, width=100, height=50, column=3, tooltip='Spend 2 wood to take a Longship'},

    hunting1a={board={-0.25,0.0,-0.66}, width=100, height=60, column=1, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend bows and wood equal to the last number rolled to take a Hide and a Game Meat\n\n- Take a bow and arrow card and a wood'},
    hunting2a={board={-0.05,0.0,-0.66}, width=100, height=60, column=2, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend bows and wood equal to the last number rolled to take a Hide and a Game Meat\n\n- Take a bow and arrow card and a wood'},
    hunting3={board={0.16,0.0,-0.58}, width=100, height=125, column=3, tooltip='If you have at least one Whaling Boat, roll a d12 up to 3 times, then do ONE of the following:\n\n- Spend spears and wood equal to the last number rolled to take an Oil, a Skin & Bones, and a Whale Meat.  (You may reduce the amount paid by 1 per ore on your Whaling Boats.)\n\n- Take a spear and a wood, and return 2 workers from this space'},
    hunting4={board={0.37,0.0,-0.58}, width=100, height=125, column=4, tooltip='If you have at least one Whaling Boat, roll a d12 up to 3 times, then do ONE of the following:\n\n- Spend spears and wood equal to the last number rolled to take an Oil, a Skin & Bones, and a Whale Meat.  (You may reduce the amount paid by 1 per ore on ONE OF your Whaling Boats.)\n\n- Take a spear and a wood, and return 2 workers from this space'},
    hunting1b={board={-0.25,0.0,-0.52}, width=80, height=50, column=1, tooltip='Take a Stockfish'},
    hunting2b={board={-0.05,0.0,-0.52}, width=110, height=70, column=2, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares and wood equal to the last number rolled to take a Fur and a snare card\n\n- Take a snare card and a wood, and return 1 worker from this space'},

    livestock1a={board={-0.25,0.0,-0.40}, width=100, height=50, column=1, tooltip='Pay 1 silver to take 2 Stockfish'},
    livestock2a={board={-0.05,0.0,-0.40}, width=100, height=50, column=2, tooltip='Pay 1 silver to take a Sheep'},
    livestock3={board={0.16,0.0,-0.35}, width=100, height=100, column=3, tooltip='Do ONE of the following:\n\n- Take a Sheep\n\n- Pay 1 silver to take a Cattle'},
    livestock4={board={0.37,0.0,-0.35}, width=100, height=100, column=4, tooltip='Pay 3 silver to take a Sheep and a Cattle'},
    livestock1b={board={-0.25,0.0,-0.30}, width=100, height=50, column=1, tooltip='Pay 2 silver to take 2 Salt Meat'},
    livestock2b={board={-0.05,0.0,-0.30}, width=100, height=50, column=2, tooltip='Pay 3 silver to take a Cattle and a Milk'},

    weekly1={board={-0.25,0.0,-0.20}, width=80, height=50, column=1, tooltip='Take a Beans and a silver'},
    weekly2={board={-0.05,0.0,-0.20}, width=100, height=50, column=2, tooltip='Take a Flax, a Stockfish, and a silver'},
    weekly3={board={0.16,0.0,-0.20}, width=100, height=50, column=3, tooltip='Take a Fruits, an Oil, a Salt Meat, and a silver'},
    weekly4={board={0.37,0.0,-0.15}, width=100, height=100, column=4, tooltip='Do ALL of the following:\n\n- Take a Spices and a silver\n\n- If you have at least 1 Cattle, take 2 Milk\n\n- If you have at least 1 Sheep, take a Wool'},

    products1={board={-0.25,0.0,-0.10}, width=100, height=50, column=1, tooltip='For each Cattle you have, take a Milk\n(max 3)'},
    products2={board={-0.05,0.0,-0.10}, width=80, height=50, column=2, tooltip='Take 2 Mead and 2 silver'},
    products3={board={0.16,0.0,-0.10}, width=100, height=50, column=3, tooltip='For each Sheep you have, take a Wool\n(max 3)'},

    crafting1a={board={-0.25,0.0,0.0}, width=100, height=50, column=1, tooltip='Pay 1 Flax to take a Linen'},
    crafting2a={board={-0.05,0.0,0.0}, width=100, height=50, column=2, tooltip='Pay 1 Hide and 1 Linen to take a Clothing and 2 silver'},
    crafting3a={board={0.16,0.0,0.0}, width=100, height=50, column=3, tooltip='Pay 1 ore to take a blue or special tile with the forge tongs symbol on it'},
    crafting4={board={0.37,0.0,0.05}, width=100, height=100, column=4, tooltip='You may do ALL of the following:\n\n- Take 4 silver\n\n- Pay 1 Wool to take a Robe\n\n- Pay 1 Silverware to take a jewelry'},
    crafting1b={board={-0.25,0.0,0.10}, width=100, height=50, column=1, tooltip='Pay 1 stone to take a silver and a Runestone'},
    crafting2b={board={-0.05,0.0,0.10}, width=100, height=50, column=2, tooltip='Pay 1 wood OR 1 ore to take a silver and a Chest'},
    crafting3b={board={0.16,0.0,0.10}, width=100, height=50, column=3, tooltip='Pay 2 stone and 2 wood to take 2 Chests and 2 Runestones'},

    mountains1a={board={-0.25,0.0,0.19}, width=100, height=50, column=1, tooltip='Take the 2 leftmost resources from a mountain'},
    mountains2a={board={-0.05,0.0,0.19}, width=100, height=50, column=2, tooltip='Take 1 wood per player, and a single ore'},
    mountains3a={board={0.16,0.0,0.19}, width=100, height=50, column=3, tooltip='Choose 2 mountains.  Take the 3 leftmost resources from one and the 2 leftmost resources from the other.'},
    mountains4a={board={0.37,0.0,0.24}, width=100, height=100, column=4, tooltip='You may do ALL of the following:\n\n- Take the 4 leftmost resources from a mountain\n\n- Choose 2 of your tiles, and upgrade each of them twice'},
    mountains1b={board={-0.25,0.0,0.29}, width=100, height=50, column=1, tooltip='Take the leftmost resource from a mountain, and upgrade one of your tiles'},
    mountains2b={board={-0.05,0.0,0.29}, width=100, height=50, column=2, tooltip='Take the 3 leftmost resources from a mountain, and upgrade one of your tiles'},
    mountains3b={board={0.16,0.0,0.29}, width=100, height=50, column=3, tooltip='Upgrade 3 of your tiles, and draw 4 weapon cards.'},
    mountains4b={board={0.37,0.0,0.44}, width=100, height=100, column=4, tooltip='You may do ALL of the following:\n\n- Choose 4 mountains, and take the 2 leftmost resources from each\n\n- Choose 3 of your tiles, and upgrade each of them twice'},
    mountains1c={board={-0.25,0.0,0.39}, width=100, height=50, column=1, tooltip='Upgrade 2 of your tiles'},
    mountains2c={board={-0.05,0.0,0.39}, width=100, height=50, column=2, tooltip='Upgrade 3 of your tiles'},
    mountains3c={board={0.16,0.0,0.39}, width=100, height=50, column=3, tooltip='Upgrade 4 of your tiles'},

    trading1={board={-0.25,0.0,0.49}, width=100, height=50, column=1, tooltip='If you have a Knarr, you may pay 1 silver to upgrade as many DIFFERENT green tiles as you want'},
    trading2={board={-0.05,0.0,0.49}, width=100, height=50, column=2, tooltip='If you have a Knarr, you may pay 1 silver to upgrade as many DIFFERENT green tiles as you want'},
    trading3={board={0.16,0.0,0.49}, width=100, height=50, column=3, tooltip='If you have a Knarr, you may take 2 special tiles by paying the silver cost on each'},

    sailing1a={board={-0.25,0.0,0.61}, width=100, height=60, column=1, tooltip='If you have a Longship, you may roll a d8 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card'},
    sailing2a={board={-0.05,0.0,0.61}, width=100, height=60, column=2, tooltip='If you have a Longship, you may roll a d12 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled PLUS the number of ore on ONE of your Longships.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card, and return 1 of the workers from this space.'},
    sailing3a={board={0.16,0.0,0.61}, width=100, height=60, column=3, tooltip='If you have a Longship, you may roll a d12 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled PLUS the number of ore on ONE of your Longships.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card, and return 1 of the workers from this space.'},
    sailing4={board={0.37,0.0,0.66}, width=100, height=100, column=4, tooltip='If you have at least TWO Longships, take a Silver Horde'},
    sailing1b={board={-0.25,0.0,0.73}, width=100, height=50, column=1, tooltip='If you have a Whaling Boat, Knarr, or Longship, take the Shetland or Faroe Islands board.  (If playing with mini-expansion 1, you can take Lofoten or Orkney instead.)'},
    sailing2b={board={-0.05,0.0,0.73}, width=100, height=50, column=2, tooltip='If you have a Knarr or Longship, take the Iceland, Greenland, or Bear Island board'},
    sailing3b={board={0.16,0.0,0.73}, width=100, height=50, column=3, tooltip='If you have a Longship, take the Baffin Island, Labrador, or Newfoundland board.  (If playing with mini-expansion 1, you can take Tierra del Fuego instead.)'},

    occupation1a={board={-0.25,0.0,0.83}, width=100, height=50, column=1, tooltip='Take an occupation card and a silver'},
    occupation2a={board={-0.05,0.0,0.83}, width=100, height=50, column=2, tooltip='Pay an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation3a={board={0.16,0.0,0.83}, width=100, height=50, column=3, tooltip='Pay an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation4={board={0.37,0.0,0.88}, width=100, height=100, column=4, tooltip='You may do ALL of the following:\n\n- Pay 1 Whaling Boat to take a Knarr\n\n- Pay an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation1b={board={-0.25,0.0,0.93}, width=100, height=50, column=1, tooltip='Pay 1 stone OR 1 ore to play an occupation card and take a silver'},
    occupation2b={board={-0.05,0.0,0.93}, width=100, height=50, column=2, tooltip='Play up to 2 occupation cards'},
    occupation3b={board={0.16,0.0,0.93}, width=100, height=50, column=3, tooltip='Play up to 4 occupation cards'},
},
{   -- Norwegians 4p
    houses1={board={-0.35,0.0,-0.87}, width=80, height=40, column=1, tooltip='Spend 1 wood to take a Shed or build either side of your Artisan Shed.'},
    houses2={board={-0.15,0.0,-0.87}, width=80, height=40, column=2, tooltip='Spend 1 stone to take a Stone House'},
    houses3={board={0.05,0.0,-0.87}, width=80, height=40, column=3, tooltip='Spend 2 stone to take a Long House'},
    houses4={board={0.25,0.0,-0.82}, width=80, height=90, column=4, tooltip='Spend 2 stone and 2 wood to take either a Long House and a Knarr OR a Stone House and a Longship'},
    houses5={board={0.45,0.0,-0.82}, width=80, height=40, column=5, tooltip='Take a Shed or build either side of your Artisan Shed'},

    ships1={board={-0.35,0.0,-0.77}, width=80, height=40, column=1, tooltip='Spend 1 wood to take a Whaling Boat'},
    ships2={board={-0.15,0.0,-0.77}, width=80, height=40, column=2, tooltip='Spend 1 wood to take a Knarr'},
    ships3={board={0.05,0.0,-0.77}, width=80, height=40, column=3, tooltip='Spend 2 wood to take a Longship'},

    hunting1a={board={-0.35,0.0,-0.68}, width=80, height=55, column=1, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend bows and/or wood equal to the last number rolled to take a Hide and a Game Meat\n\n- Take a bow and arrow card and a wood'},
    hunting1b={board={-0.35,0.0,-0.56}, width=80, height=65, column=1, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares and/or spears equal to the last number rolled to take 2 Stockfish and 1 Oil\n\n- Take a snare and a spear'},
    hunting2a={board={-0.15,0.0,-0.68}, width=80, height=55, column=2, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend bows and/or wood equal to the last number rolled to take an Antlers and a Game Meat\n\n- Take a bow card and a wood, and return one of your workers to your worker pool'},
    hunting2b={board={-0.15,0.0,-0.56}, width=80, height=65, column=2, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares and/or wood equal to the last number rolled to take a Fur and a snare card\n\n- Take a snare card and a wood, and return one of your workers to your worker pool'},
    hunting3={board={0.05,0.0,-0.62}, width=80, height=110, column=3, tooltip='If you have at least one Whaling Boat, roll a d12 up to 3 times, then do ONE of the following:\n\n- Spend spears and/or wood equal to the last number rolled to take an Oil, a Skin & Bones, and a Whale Meat.  (You may reduce the amount paid by 1 per ore on your Whaling Boats.)\n\n- Take a spear and a wood, and return 2 workers from this space'},
    hunting4={board={0.25,0.0,-0.62}, width=80, height=110, column=4, tooltip='If you have at least one Whaling Boat, roll a d12 up to 3 times, then do ONE of the following:\n\n- Spend spears and/or wood equal to the last number rolled to take an Oil, a Skin & Bones, and a Whale Meat.  (You may reduce the amount paid by 1 per ore on ONE of your Whaling Boats.)\n\n- Take a spear and a wood, and return 2 workers from this space'},
    hunting5={board={0.45,0.0,-0.62}, width=80, height=100, column=5, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares, spears, and/or bows equal to the last number rolled to take an Antlers and a random weapon.\n\n- Take a snare, spear, and bow card'},

    livestock1a={board={-0.35,0.0,-0.44}, width=80, height=50, column=1, tooltip='Spend 1 Sheep to take a Wool, a Hide, and a Salt Meat'},
    livestock1b={board={-0.35,0.0,-0.32}, width=80, height=60, column=1, tooltip='Spend 1 Horse OR 1 Cow to take a Salt Meat and a Leather'},
    livestock2={board={-0.15,0.0,-0.38}, width=80, height=100, column=2, tooltip='Spend 3 silver to take a Grain and any 1 animal'},
    livestock3={board={0.05,0.0,-0.38}, width=80, height=90, column=3, tooltip='Spend 2 silver and a Beans to take 2 Sheep, 2 Pigs, or a Sheep and a Pig'},
    livestock4={board={0.25,0.0,-0.38}, width=80, height=90, column=4, tooltip='Spend 3 silver and a Grain to take any 2 animals'},
    livestock5={board={0.45,0.0,-0.38}, width=80, height=70, column=5, tooltip='Spend 1 Pig to take a Skin & Bones and a Salt Meat'},

    weekly1={board={-0.35,0.0,-0.11}, width=80, height=80, column=1, tooltip='Do ALL of the following:\n\n- Take a Beans and a silver\n\n- If you have 2 Cows, take a Milk.  If you have 3 or more Cows, take 2 Milk instead.'},
    weekly2={board={-0.15,0.0,-0.11}, width=80, height=80, column=2, tooltip='Do ALL of the following:\n\n- Take 2 silver, a Flax, and a Mead\n\n- If you have at least 1 horse, take a Grain.'},
    weekly3={board={0.05,0.0,-0.11}, width=80, height=80, column=3, tooltip='Do ALL of the following:\n\n- Take a Fruits\n\n- If you have 2 Sheep, take 2 Wool.  If you have 3 or more Sheep, take 3 Wool instead.'},
    weekly4={board={0.25,0.0,-0.11}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take a silver, a Spices, and a Herbs\n\n- If you have any Pigs, take a Salt Meat\n\n- If you have any Sheep, take a Wool'},
    weekly5={board={0.45,0.0,-0.11}, width=80, height=80, column=5, tooltip='Take a silver, a Herbs, and a Mead'},

    crafting1a={board={-0.35,0.0,0.03}, width=80, height=40, column=1, tooltip='Spend 1 Flax to take a Linen'},
    crafting1b={board={-0.35,0.0,0.12}, width=80, height=40, column=1, tooltip='Spend 1 stone to take a silver and a Runestone'},
    crafting2a={board={-0.15,0.0,0.03}, width=80, height=40, column=2, tooltip='Spend 1 Hide and 1 Linen to take a Clothing and 2 silver'},
    crafting2b={board={-0.15,0.0,0.12}, width=80, height=40, column=2, tooltip='Spend 1 wood OR stone to take a silver and a Chest'},
    crafting3a={board={0.05,0.0,0.03}, width=80, height=40, column=3, tooltip='Spend 1 ore to take a blue or special tile with the forge tongs symbol on it'},
    crafting3b={board={0.05,0.0,0.12}, width=80, height=40, column=3, tooltip='Spend 2 wood, 1 stone, and 1 ore to take 2 Tools and a Runestone'},
    crafting4={board={0.25,0.0,0.07}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take 2 silver\n\n- Spend 1 Wool to take a Wadmal\n- Spend 1 Silverware to take a Jewelry'},
    crafting5={board={0.45,0.0,0.07}, width=80, height=50, column=5, tooltip='Spend 1 ore to take a blue or special tile with the forge tongs symbol on it that has a sword value less than 9'},

    mountains1a={board={-0.35,0.0,0.21}, width=80, height=40, column=1, tooltip='Take the 2 leftmost resources from a mountain'},
    mountains1b={board={-0.35,0.0,0.30}, width=80, height=40, column=1, tooltip='Do ALL of the following:\n\n- Take the leftmost resource from a mountain\n\n- Upgrade 1 of your tiles'},
    mountains1c={board={-0.35,0.0,0.39}, width=80, height=40, column=1, tooltip='Upgrade 2 of your tiles'},
    mountains2a={board={-0.15,0.0,0.21}, width=80, height=40, column=2, tooltip='Take 3 wood and 1 ore'},
    mountains2b={board={-0.15,0.0,0.30}, width=80, height=40, column=2, tooltip='Do ALL of the following:\n\n- Take the 3 leftmost resources from a mountain\n\n- Draw 2 weapon cards'},
    mountains2c={board={-0.15,0.0,0.39}, width=80, height=40, column=2, tooltip='Upgrade 3 of your tiles'},
    mountains3a={board={0.05,0.0,0.21}, width=80, height=40, column=3, tooltip='Choose 2 mountains.  Take the 3 leftmost resources from one and the 2 leftmost resources from the other.'},
    mountains3b={board={0.05,0.0,0.30}, width=80, height=40, column=3, tooltip='Upgrade 3 of your tiles.  One of those tiles may be upgraded 2 steps.'},
    mountains3c={board={0.05,0.0,0.39}, width=80, height=40, column=3, tooltip='Upgrade 4 of your tiles'},
    mountains4a={board={0.25,0.0,0.25}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take the 4 leftmost resources from a mountain\n\n- Upgrade 2 of your tiles by 2 steps each'},
    mountains4c={board={0.25,0.0,0.39}, width=80, height=40, column=4, tooltip='Upgrade 3 of your tiles by 2 steps each'},
    mountains5={board={0.45,0.0,0.25}, width=80, height=80, column=5, tooltip='Do ALL of the following:\n\n- Take 2 different building resources from the general supply\n\n- Upgrade 1 of your tiles'},

    sailing1a={board={-0.35,0.0,0.50}, width=80, height=40, column=1, tooltip='If you have a Knarr, spend 2 silver to upgrade as many DIFFERENT green tiles as you want'},
    sailing1b={board={-0.35,0.0,0.61}, width=80, height=60, column=1, tooltip='If you have a Longship, you may roll a d8 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card'},
    sailing1c={board={-0.35,0.0,0.71}, width=80, height=40, column=1, tooltip='If you have a Whaling Boat, a Knarr, or a Longship, take one of the following exploration boards:\n\n- Isle of Man\n- Isle of Skye\n- Limerick\b- Shetland\n- Faroe Islands\n- Lofoten\n- Orkney'},
    sailing2a={board={-0.15,0.0,0.50}, width=80, height=40, column=2, tooltip='If you have a Knarr, spend 1 silver to upgrade as many DIFFERENT green tiles as you want'},
    sailing2b={board={-0.15,0.0,0.61}, width=80, height=60, column=2, tooltip='If you have a Longship, you may roll a d12 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled PLUS the number of ore on ONE of your Longships.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card, and return 1 of the workers from this space.'},
    sailing2c={board={-0.15,0.0,0.71}, width=80, height=40, column=2, tooltip='If you have a Knarr or a Longship, take one of the following exploration boards:\n\n- Outer Hebrides\n- Islay\n- Wexford\n- Iceland\n- Greenland\n- Bear Island'},
    sailing3a={board={0.05,0.0,0.50}, width=80, height=40, column=3, tooltip='If you have a Knarr, you may take 2 special tiles by paying the silver cost on each'},
    sailing3b={board={0.05,0.0,0.61}, width=80, height=60, column=3, tooltip='If you have a Longship, you may roll a d12 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled PLUS the number of ore on ONE of your Longships.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card, and return 1 of the workers from this space.'},
    sailing3c={board={0.05,0.0,0.71}, width=80, height=40, column=3, tooltip='If you have a Longship, take one of the following exploration boards:\n\n- Cork\n- Waterford\n- Baffin Island\n- Labrador\n- Newfoundland\n- Tierra del Fuego'},
    sailing4b={board={0.25,0.0,0.60}, width=80, height=60, column=4, tooltip='If you have at least TWO Longships, take a Silver Horde'},
    sailing4c={board={0.25,0.0,0.74}, width=90, height=70, column=4, tooltip='Do ALL of the following:\n\n- If you have a Longship, take ANY exploration board\n\n- Spend 2 silver and a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it'},
    sailing5b={board={0.45,0.0,0.62}, width=80, height=80, column=5, tooltip='If you have a Knarr, you may roll a d8 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled.  You may spend swords, bows, or spears to increase the rolled number.\n\n- Take a sword, a bow, and a spear'},
    sailing5c={board={0.45,0.0,0.78}, width=80, height=70, column=5, tooltip='Spend 1 silver and 1 wood to take a Whaling Boat.  Take one of the following exploration boards:\n\n- Isle of Man\n- Isle of Skye\n- Limerick\b- Shetland\n- Faroe Islands\n- Lofoten\n- Orkney'},

    occupation1a={board={-0.35,0.0,0.82}, width=80, height=70, column=1, tooltip='Discard an occupation card from your hand to do take 2 silver OR 3 occupation cards'},
    occupation1b={board={-0.35,0.0,0.94}, width=80, height=40, column=1, tooltip='Spend 1 stone OR 1 ore to play an occupation card and take a silver'},
    occupation2a={board={-0.15,0.0,0.81}, width=80, height=40, column=2, tooltip='Spend an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation2b={board={-0.15,0.0,0.92}, width=80, height=50, column=2, tooltip='Do ALL of the following:\n\n- Take a silver and 2 occupation cards\n\n- Play an occupation card'},
    occupation3b={board={0.05,0.0,0.90}, width=80, height=40, column=3, tooltip='Play up to 4 occupation cards'},
    occupation4={board={0.25,0.0,0.90}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Spend a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it\n\n- Spend an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation5={board={0.45,0.0,0.90}, width=80, height=40, column=5, tooltip='Spend a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it'},
},
{   -- Norwegians 3p
    houses1={board={-0.35,0.0,-0.88}, width=80, height=40, column=1, tooltip='Spend 1 wood to take a Shed or build either side of your Artisan Shed'},
    houses2={board={-0.15,0.0,-0.84}, width=80, height=90, column=2, tooltip='Do ONE of the following:\n\n- Spend 1 stone to take a Stone House\n\n- Spend 1 wood to take a Knarr'},
    houses3={board={0.05,0.0,-0.84}, width=80, height=90, column=3, tooltip='Do ONE of the following:\n\n- Spend 2 stone to take a Long House\n\n- Spend 2 wood to take a Longship'},
    houses4={board={0.25,0.0,-0.84}, width=80, height=90, column=4, tooltip='Spend 2 stone and 2 wood to take either a Long House and a Knarr OR a Stone House and a Longship'},
    houses5={board={0.45,0.0,-0.84}, width=80, height=60, column=5, tooltip='Spend 1 Whaling Boat and 1 silver to take a Longship'},

    ships1={board={-0.35,0.0,-0.80}, width=80, height=40, column=1, tooltip='Spend 1 wood to take a Whaling Boat'},

    hunting1a={board={-0.35,0.0,-0.70}, width=80, height=60, column=1, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend bows and/or wood equal to the last number rolled to take a Hide and a Game Meat\n\n- Take a bow and arrow card and a wood'},
    hunting2={board={-0.15,0.0,-0.63}, width=80, height=65, column=2, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares and/or wood equal to the last number rolled to take a Fur and a snare card\n\n- Take a snare card and a wood, and return one of your workers to your worker pool'},
    hunting3={board={0.05,0.0,-0.63}, width=80, height=110, column=3, tooltip='If you have at least one Whaling Boat, roll a d12 up to 3 times, then do ONE of the following:\n\n- Spend spears and/or wood equal to the last number rolled to take an Oil, a Skin & Bones, and a Whale Meat.  (You may reduce the amount paid by 1 per ore on your Whaling Boats.)\n\n- Take a spear and a wood, and return 2 workers from this space'},
    hunting5={board={0.45,0.0,-0.63}, width=80, height=110, column=5, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares, spears, and/or bows equal to the last number rolled to take an Antlers and a random weapon.\n\n- Take a snare, spear, and bow card'},
    hunting1b={board={-0.35,0.0,-0.56}, width=80, height=65, column=1, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares and/or spears equal to the last number rolled to take 2 Stockfish and 1 Oil\n\n- Take a snare and a spear'},

    livestock1={board={-0.35,0.0,-0.38}, width=80, height=125, column=1, tooltip='Do ONE of the following:\n\n- Spend a Sheep to take a Wool, a Hide, and a Salt Meat\n\n- Spend a Horse OR a Cow to take a Salt Meat and a Leather'},
    livestock2={board={-0.15,0.0,-0.38}, width=80, height=100, column=2, tooltip='Spend 3 silver to take a Grain and any 1 animal'},
    livestock3={board={0.05,0.0,-0.38}, width=80, height=90, column=3, tooltip='Spend 2 silver and a Beans to take 2 Sheep, 2 Pigs, or a Sheep and a Pig'},
    livestock4={board={0.25,0.0,-0.38}, width=80, height=90, column=4, tooltip='Spend 3 silver and a Grain to take any 2 animals'},
    livestock5={board={0.45,0.0,-0.38}, width=80, height=70, column=5, tooltip='Spend 1 Pig to take a Skin & Bones and a Salt Meat'},

    weekly1={board={-0.35,0.0,-0.11}, width=80, height=80, column=1, tooltip='Do ALL of the following:\n\n- Take a Beans and a silver\n\n- If you have 2 Cows, take a Milk.  If you have 3 or more Cows, take 2 Milk instead.'},
    weekly2={board={-0.15,0.0,-0.11}, width=80, height=80, column=2, tooltip='Do ALL of the following:\n\n- Take 2 silver, a Flax, and a Mead\n\n- If you have at least 1 horse, take a Grain.'},
    weekly3={board={0.05,0.0,-0.11}, width=80, height=80, column=3, tooltip='Do ALL of the following:\n\n- Take a Fruits\n\n- If you have 2 Sheep, take 2 Wool.  If you have 3 or more Sheep, take 3 Wool instead.'},
    weekly4={board={0.25,0.0,-0.11}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take a silver, a Spices, and a Herbs\n\n- If you have any Pigs, take a Salt Meat\n\n- If you have any Sheep, take a Wool'},
    weekly5={board={0.45,0.0,-0.11}, width=80, height=80, column=5, tooltip='Take a silver, a Herbs, and a Mead'},

    crafting1a={board={-0.35,0.0,0.03}, width=80, height=40, column=1, tooltip='Spend 1 Flax to take a Linen'},
    crafting1b={board={-0.35,0.0,0.12}, width=80, height=40, column=1, tooltip='Spend 1 stone to take a silver and a Runestone'},
    crafting2a={board={-0.15,0.0,0.03}, width=80, height=40, column=2, tooltip='Spend 1 Hide and 1 Linen to take a Clothing and 2 silver'},
    crafting2b={board={-0.15,0.0,0.12}, width=80, height=40, column=2, tooltip='Spend 1 wood OR stone to take a silver and a Chest'},
    crafting3a={board={0.05,0.0,0.03}, width=80, height=40, column=3, tooltip='Spend 1 ore to take a blue or special tile with the forge tongs symbol on it'},
    crafting3b={board={0.05,0.0,0.12}, width=80, height=40, column=3, tooltip='Spend 2 wood, 1 stone, and 1 ore to take 2 Tools and a Runestone'},
    crafting4={board={0.25,0.0,0.07}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take 2 silver\n\n- Spend 1 Wool to take a Wadmal\n- Spend 1 Silverware to take a Jewelry'},
    crafting5={board={0.45,0.0,0.07}, width=80, height=50, column=5, tooltip='Spend 1 ore to take a blue or special tile with the forge tongs symbol on it that has a sword value less than 9'},

    mountains1a={board={-0.35,0.0,0.21}, width=80, height=40, column=1, tooltip='Take the 2 leftmost resources from a mountain'},
    mountains1b={board={-0.35,0.0,0.30}, width=80, height=40, column=1, tooltip='Do ALL of the following:\n\n- Take the leftmost resource from a mountain\n\n- Upgrade 1 of your tiles'},
    mountains1c={board={-0.35,0.0,0.39}, width=80, height=40, column=1, tooltip='Upgrade 2 of your tiles'},
    mountains2a={board={-0.15,0.0,0.21}, width=80, height=40, column=2, tooltip='Take 3 wood and 1 ore'},
    mountains2b={board={-0.15,0.0,0.30}, width=80, height=40, column=2, tooltip='Do ALL of the following:\n\n- Take the 3 leftmost resources from a mountain\n\n- Draw 2 weapon cards'},
    mountains2c={board={-0.15,0.0,0.39}, width=80, height=40, column=2, tooltip='Upgrade 3 of your tiles'},
    mountains3a={board={0.05,0.0,0.21}, width=80, height=40, column=3, tooltip='Choose 2 mountains.  Take the 3 leftmost resources from one and the 2 leftmost resources from the other.'},
    mountains3b={board={0.05,0.0,0.30}, width=80, height=40, column=3, tooltip='Upgrade 3 of your tiles.  One of those tiles may be upgraded 2 steps.'},
    mountains3c={board={0.05,0.0,0.39}, width=80, height=40, column=3, tooltip='Upgrade 4 of your tiles'},
    mountains4a={board={0.25,0.0,0.25}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take the 4 leftmost resources from a mountain\n\n- Upgrade 2 of your tiles by 2 steps each'},
    mountains4c={board={0.25,0.0,0.39}, width=80, height=40, column=4, tooltip='Upgrade 3 of your tiles by 2 steps each'},
    mountains5={board={0.45,0.0,0.25}, width=80, height=80, column=5, tooltip='Do ALL of the following:\n\n- Take 2 different building resources from the general supply\n\n- Upgrade 1 of your tiles'},

    sailing1a={board={-0.35,0.0,0.50}, width=80, height=40, column=1, tooltip='If you have a Knarr, spend 2 silver to upgrade as many DIFFERENT green tiles as you want'},
    sailing1b={board={-0.35,0.0,0.61}, width=80, height=60, column=1, tooltip='If you have a Longship, you may roll a d8 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card'},
    sailing1c={board={-0.35,0.0,0.71}, width=80, height=40, column=1, tooltip='If you have a Whaling Boat, a Knarr, or a Longship, take one of the following exploration boards:\n\n- Isle of Man\n- Isle of Skye\n- Limerick\b- Shetland\n- Faroe Islands\n- Lofoten\n- Orkney'},
    sailing2a={board={-0.15,0.0,0.50}, width=80, height=40, column=2, tooltip='If you have a Knarr, spend 1 silver to upgrade as many DIFFERENT green tiles as you want'},
    sailing2b={board={-0.15,0.0,0.61}, width=80, height=60, column=2, tooltip='If you have a Longship, you may roll a d12 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled PLUS the number of ore on ONE of your Longships.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card, and return 1 of the workers from this space.'},
    sailing2c={board={-0.15,0.0,0.71}, width=80, height=40, column=2, tooltip='If you have a Knarr or a Longship, take one of the following exploration boards:\n\n- Outer Hebrides\n- Islay\n- Wexford\n- Iceland\n- Greenland\n- Bear Island'},
    sailing3a={board={0.05,0.0,0.50}, width=80, height=40, column=3, tooltip='If you have a Knarr, you may take 2 special tiles by paying the silver cost on each'},
    sailing3b={board={0.05,0.0,0.61}, width=80, height=60, column=3, tooltip='If you have a Longship, you may roll a d12 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled PLUS the number of ore on ONE of your Longships.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card, and return 1 of the workers from this space.'},
    sailing3c={board={0.05,0.0,0.71}, width=80, height=40, column=3, tooltip='If you have a Longship, take one of the following exploration boards:\n\n- Cork\n- Waterford\n- Baffin Island\n- Labrador\n- Newfoundland\n- Tierra del Fuego'},
    sailing4b={board={0.25,0.0,0.60}, width=80, height=60, column=4, tooltip='If you have at least TWO Longships, take a Silver Horde'},
    sailing4c={board={0.25,0.0,0.74}, width=90, height=70, column=4, tooltip='Do ALL of the following:\n\n- If you have a Longship, take ANY exploration board\n\n- Spend 2 silver and a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it'},
    sailing5b={board={0.45,0.0,0.62}, width=80, height=80, column=5, tooltip='If you have a Knarr, you may roll a d8 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled.  You may spend swords, bows, or spears to increase the rolled number.\n\n- Take a sword, a bow, and a spear'},
    sailing5c={board={0.45,0.0,0.78}, width=80, height=70, column=5, tooltip='Spend 1 silver and 1 wood to take a Whaling Boat.  Take one of the following exploration boards:\n\n- Isle of Man\n- Isle of Skye\n- Limerick\b- Shetland\n- Faroe Islands\n- Lofoten\n- Orkney'},

    occupation1a={board={-0.35,0.0,0.82}, width=80, height=70, column=1, tooltip='Discard an occupation card from your hand to do take 2 silver OR 3 occupation cards'},
    occupation1b={board={-0.35,0.0,0.94}, width=80, height=40, column=1, tooltip='Spend 1 stone OR 1 ore to play an occupation card and take a silver'},
    occupation2a={board={-0.15,0.0,0.81}, width=80, height=40, column=2, tooltip='Spend an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation2b={board={-0.15,0.0,0.92}, width=80, height=50, column=2, tooltip='Do ALL of the following:\n\n- Take a silver and 2 occupation cards\n\n- Play an occupation card'},
    occupation3b={board={0.05,0.0,0.90}, width=80, height=40, column=3, tooltip='Play up to 4 occupation cards'},
    occupation4={board={0.25,0.0,0.90}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Spend a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it\n\n- Spend an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation5={board={0.45,0.0,0.90}, width=80, height=40, column=5, tooltip='Spend a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it'},
},
{   -- Norwegians 1-2p
    houses1={board={-0.35,0.0,-0.88}, width=80, height=40, column=1, tooltip='Spend 1 wood to take a Shed or build either side of your Artisan Shed'},
    houses2={board={-0.15,0.0,-0.84}, width=80, height=90, column=2, tooltip='Do ONE of the following:\n\n- Spend 1 stone to take a Stone House\n\n- Spend 1 wood to take a Knarr'},
    houses3={board={0.05,0.0,-0.84}, width=80, height=90, column=3, tooltip='Do ONE of the following:\n\n- Spend 2 stone to take a Long House\n\n- Spend 2 wood to take a Longship'},
    houses4={board={0.25,0.0,-0.84}, width=80, height=90, column=4, tooltip='Spend 2 stone and 2 wood to take either a Long House and a Knarr OR a Stone House and a Longship'},
    houses5={board={0.45,0.0,-0.84}, width=80, height=60, column=5, tooltip='Spend 1 Whaling Boat and 1 silver to take a Longship'},

    ships1={board={-0.35,0.0,-0.80}, width=80, height=40, column=1, tooltip='Spend 1 wood to take a Whaling Boat'},

    hunting1a={board={-0.35,0.0,-0.70}, width=80, height=60, column=1, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend bows and/or wood equal to the last number rolled to take a Hide and a Game Meat\n\n- Take a bow and arrow card and a wood'},
    hunting2={board={-0.15,0.0,-0.63}, width=80, height=65, column=2, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares and/or wood equal to the last number rolled to take a Fur and a snare card\n\n- Take a snare card and a wood, and return one of your workers to your worker pool'},
    hunting3={board={0.05,0.0,-0.63}, width=80, height=110, column=3, tooltip='If you have at least one Whaling Boat, roll a d12 up to 3 times, then do ONE of the following:\n\n- Spend spears and/or wood equal to the last number rolled to take an Oil, a Skin & Bones, and a Whale Meat.  (You may reduce the amount paid by 1 per ore on your Whaling Boats.)\n\n- Take a spear and a wood, and return 2 workers from this space'},
    hunting5={board={0.45,0.0,-0.63}, width=80, height=110, column=5, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares, spears, and/or bows equal to the last number rolled to take an Antlers and a random weapon.\n\n- Take a snare, spear, and bow card'},
    hunting1b={board={-0.35,0.0,-0.56}, width=80, height=65, column=1, tooltip='Roll a d8 up to 3 times, then do ONE of the following:\n\n- Spend snares and/or spears equal to the last number rolled to take 2 Stockfish and 1 Oil\n\n- Take a snare and a spear'},

    livestock1={board={-0.35,0.0,-0.38}, width=80, height=125, column=1, tooltip='Do ONE of the following:\n\n- Spend a Sheep to take a Wool, a Hide, and a Salt Meat\n\n- Spend a Horse OR a Cow to take a Salt Meat and a Leather'},
    livestock2={board={-0.15,0.0,-0.38}, width=80, height=100, column=2, tooltip='Spend 3 silver to take a Grain and any 1 animal'},
    livestock3={board={0.05,0.0,-0.38}, width=80, height=90, column=3, tooltip='Spend 2 silver and a Beans to take 2 Sheep, 2 Pigs, or a Sheep and a Pig'},
    livestock4={board={0.25,0.0,-0.38}, width=80, height=90, column=4, tooltip='Spend 3 silver and a Grain to take any 2 animals'},
    livestock5={board={0.45,0.0,-0.38}, width=80, height=70, column=5, tooltip='Spend 1 Pig to take a Skin & Bones and a Salt Meat'},

    weekly1={board={-0.35,0.0,-0.12}, width=80, height=80, column=1, tooltip='Do ALL of the following:\n\n- Take a Beans and a silver\n\n- If you have 2 Cows, take a Milk.  If you have 3 or more Cows, take 2 Milk instead.'},
    weekly2={board={-0.15,0.0,-0.12}, width=80, height=80, column=2, tooltip='Do ALL of the following:\n\n- Take 2 silver, a Flax, and a Mead\n\n- If you have at least 1 horse, take a Grain.'},
    weekly3={board={0.05,0.0,-0.12}, width=80, height=80, column=3, tooltip='Do ALL of the following:\n\n- Take a Fruits\n\n- If you have 2 Sheep, take 2 Wool.  If you have 3 or more Sheep, take 3 Wool instead.'},
    weekly4={board={0.25,0.0,-0.12}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take a silver, a Spices, and a Herbs\n\n- If you have any Pigs, take a Salt Meat\n\n- If you have any Sheep, take a Wool'},
    weekly5={board={0.45,0.0,-0.12}, width=80, height=80, column=5, tooltip='Take a silver, a Herbs, and a Mead'},

    crafting1a={board={-0.35,0.0,0.04}, width=80, height=40, column=1, tooltip='Spend 1 Flax to take a Linen'},
    crafting2a={board={-0.15,0.0,0.04}, width=80, height=40, column=2, tooltip='Spend 1 Hide and 1 Linen to take a Clothing and 2 silver'},
    crafting3a={board={0.05,0.0,0.04}, width=80, height=40, column=3, tooltip='Spend 1 ore to take a blue or special tile with the forge tongs symbol on it'},
    crafting5={board={0.45,0.0,0.08}, width=80, height=50, column=5, tooltip='Spend 1 ore to take a blue or special tile with the forge tongs symbol on it that has a sword value less than 9'},
    crafting1b={board={-0.35,0.0,0.12}, width=80, height=40, column=1, tooltip='Spend 1 stone to take a silver and a Runestone'},
    crafting2b={board={-0.15,0.0,0.12}, width=80, height=40, column=2, tooltip='Spend 1 wood OR stone to take a silver and a Chest'},
    crafting3b={board={0.05,0.0,0.12}, width=80, height=40, column=3, tooltip='Spend 2 wood, 1 stone, and 1 ore to take a silver, a Tools, a Runestone, and a Chest'},

    mountains1a={board={-0.35,0.0,0.24}, width=80, height=40, column=1, tooltip='Take the 2 leftmost resources from a mountain'},
    mountains2a={board={-0.15,0.0,0.24}, width=80, height=40, column=2, tooltip='Upgrade 3 of your tiles'},
    mountains3a={board={0.05,0.0,0.24}, width=80, height=40, column=3, tooltip='Do ALL of the following:\n\n- Take the 3 leftmost resources from a mountain\n\n- Upgrade 2 of your tiles'},
    mountains4={board={0.25,0.0,0.29}, width=80, height=80, column=4, tooltip='Do ALL of the following:\n\n- Take the 4 leftmost resources from a mountain\n\n- Upgrade 2 of your tiles by 2 steps each'},
    mountains5={board={0.45,0.0,0.29}, width=80, height=80, column=5, tooltip='Do ALL of the following:\n\n- Take 2 different building resources from the general supply\n\n- Upgrade 1 of your tiles'},
    mountains1b={board={-0.35,0.0,0.34}, width=80, height=40, column=1, tooltip='Do ALL of the following:\n\n- Take the leftmost resource from a mountain\n\n- Upgrade 1 of your tiles'},
    mountains2b={board={-0.15,0.0,0.34}, width=80, height=40, column=2, tooltip='Do ALL of the following:\n\n- Take the 3 leftmost resources from a mountain\n\n- Draw 2 weapon cards'},
    mountains3b={board={0.05,0.0,0.34}, width=80, height=40, column=3, tooltip='Upgrade 4 of your tiles'},

    sailing1a={board={-0.35,0.0,0.49}, width=80, height=40, column=1, tooltip='If you have a Knarr, spend 2 silver to upgrade as many DIFFERENT green tiles as you want'},
    sailing3a={board={0.05,0.0,0.49}, width=80, height=40, column=3, tooltip='If you have a Knarr, you may take 2 special tiles by paying the silver cost on each'},
    sailing1b={board={-0.35,0.0,0.60}, width=80, height=60, column=1, tooltip='If you have a Longship, you may roll a d8 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card'},
    sailing2b={board={-0.15,0.0,0.60}, width=80, height=60, column=2, tooltip='If you have a Longship, you may roll a d12 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled PLUS the number of ore on ONE of your Longships.  You may pay stone and sword cards to increase the rolled number.\n\n- Take a stone and a sword card, and return 1 of the workers from this space.'},
    sailing4b={board={0.25,0.0,0.60}, width=80, height=60, column=4, tooltip='If you have at least TWO Longships, take a Silver Horde'},
    sailing5b={board={0.45,0.0,0.58}, width=80, height=80, column=5, tooltip='If you have a Knarr, you may roll a d8 up to 3 times, then do ONE of the following:\n\n- Take a blue tile with a sword value equal to or less than the last number you rolled.  You may spend swords, bows, or spears to increase the rolled number.\n\n- Take a sword, a bow, and a spear'},
    sailing1c={board={-0.35,0.0,0.70}, width=80, height=40, column=1, tooltip='If you have a Whaling Boat, a Knarr, or a Longship, take one of the following exploration boards:\n\n- Isle of Man\n- Isle of Skye\n- Limerick\b- Shetland\n- Faroe Islands\n- Lofoten\n- Orkney'},
    sailing2c={board={-0.15,0.0,0.70}, width=80, height=40, column=2, tooltip='If you have a Knarr or a Longship, take one of the following exploration boards:\n\n- Outer Hebrides\n- Islay\n- Wexford\n- Iceland\n- Greenland\n- Bear Island'},
    sailing3c={board={0.05,0.0,0.70}, width=80, height=40, column=3, tooltip='If you have a Longship, take one of the following exploration boards:\n\n- Cork\n- Waterford\n- Baffin Island\n- Labrador\n- Newfoundland\n- Tierra del Fuego'},
    sailing5c={board={0.45,0.0,0.72}, width=80, height=70, column=5, tooltip='Spend 1 silver and 1 wood to take a Whaling Boat.  Take one of the following exploration boards:\n\n- Isle of Man\n- Isle of Skye\n- Limerick\b- Shetland\n- Faroe Islands\n- Lofoten\n- Orkney'},

    occupation2a={board={-0.15,0.0,0.80}, width=80, height=40, column=2, tooltip='Spend an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation1b={board={-0.35,0.0,0.90}, width=80, height=40, column=1, tooltip='Spend 1 stone OR 1 ore to play an occupation card and take a silver'},
    occupation2b={board={-0.15,0.0,0.91}, width=80, height=50, column=2, tooltip='Do ALL of the following:\n\n- Take a silver and 2 occupation cards\n\n- Play an occupation card'},
    occupation3b={board={0.05,0.0,0.90}, width=80, height=40, column=3, tooltip='Play up to 4 occupation cards'},
    occupation4={board={0.25,0.0,0.86}, width=80, height=90, column=4, tooltip='Do ALL of the following:\n\n- Spend a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it\n\n- Spend an amount of silver equal to the current round to emigrate.  (Turn a Knarr or Longship facedown and use it to cover one of your banquet table spaces.)'},
    occupation5={board={0.45,0.0,0.86}, width=80, height=50, column=5, tooltip='Spend a Whaling Boat to take a Small Emigration tile and cover one of your banquet table spaces with it'},
},
}

function houses1(object, color) moveWorkersToAction('houses1', color) end
function houses2(object, color) moveWorkersToAction('houses2', color) end
function houses3(object, color) if moveWorkersToAction('houses3', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function houses4(object, color) moveWorkersToAction('houses4', color) end
function houses5(object, color) moveWorkersToAction('houses5', color) end
function ships1(object, color) moveWorkersToAction('ships1', color) end
function ships2(object, color) moveWorkersToAction('ships2', color) end
function ships3(object, color) if moveWorkersToAction('ships3', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function hunting1a(object, color) moveWorkersToAction('hunting1a', color) end
function hunting2(object, color) moveWorkersToAction('hunting2', color) end
function hunting2a(object, color) moveWorkersToAction('hunting2a', color) end
function hunting3(object, color) if moveWorkersToAction('hunting3', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function hunting4(object, color) moveWorkersToAction('hunting4', color) end
function hunting5(object, color) moveWorkersToAction('hunting5', color) end
function hunting1b(object, color) moveWorkersToAction('hunting1b', color) end
function hunting2b(object, color) moveWorkersToAction('hunting2b', color) end
function livestock1(object, color) moveWorkersToAction('livestock1', color) end
function livestock1a(object, color) moveWorkersToAction('livestock1a', color) end
function livestock2(object, color) moveWorkersToAction('livestock2', color) end
function livestock2a(object, color) moveWorkersToAction('livestock2a', color) end
function livestock3(object, color) if moveWorkersToAction('livestock3', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function livestock4(object, color) moveWorkersToAction('livestock4', color) end
function livestock5(object, color) moveWorkersToAction('livestock5', color) end
function livestock1b(object, color) moveWorkersToAction('livestock1b', color) end
function livestock2b(object, color) moveWorkersToAction('livestock2b', color) end
function weekly1(object, color) moveWorkersToAction('weekly1', color) end
function weekly2(object, color) moveWorkersToAction('weekly2', color) end
function weekly3(object, color) if moveWorkersToAction('weekly3', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function weekly4(object, color) moveWorkersToAction('weekly4', color) end
function weekly5(object, color) moveWorkersToAction('weekly5', color) end
function products1(object, color) moveWorkersToAction('products1', color) end
function products2(object, color) moveWorkersToAction('products2', color) end
function products3(object, color) if moveWorkersToAction('products3', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function crafting1a(object, color) moveWorkersToAction('crafting1a', color) end
function crafting2a(object, color) moveWorkersToAction('crafting2a', color) end
function crafting3a(object, color) if moveWorkersToAction('crafting3a', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function crafting4(object, color) moveWorkersToAction('crafting4', color) end
function crafting5(object, color) moveWorkersToAction('crafting5', color) end
function crafting1b(object, color) moveWorkersToAction('crafting1b', color) end
function crafting2b(object, color) moveWorkersToAction('crafting2b', color) end
function crafting3b(object, color) if moveWorkersToAction('crafting3b', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function mountains1a(object, color) moveWorkersToAction('mountains1a', color) end
function mountains2a(object, color) moveWorkersToAction('mountains2a', color) end
function mountains3a(object, color) if moveWorkersToAction('mountains3a', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function mountains4a(object, color) moveWorkersToAction('mountains4a', color) end
function mountains4(object, color) moveWorkersToAction('mountains4', color) end
function mountains5(object, color) moveWorkersToAction('mountains5', color) end
function mountains1b(object, color) moveWorkersToAction('mountains1b', color) end
function mountains2b(object, color) if moveWorkersToAction('mountains2b', color) and norwegiansEnabled and state.usingAutoDeal then dealToPlayer(color, 2, swordDeck) end end
function mountains3b(object, color) if moveWorkersToAction('mountains3b', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) if not norwegiansEnabled then dealToPlayer(color, 4, swordDeck) end end end
function mountains4b(object, color) moveWorkersToAction('mountains4b', color) end
function mountains1c(object, color) moveWorkersToAction('mountains1c', color) end
function mountains2c(object, color) moveWorkersToAction('mountains2c', color) end
function mountains3c(object, color) if moveWorkersToAction('mountains3c', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function mountains4c(object, color) moveWorkersToAction('mountains4c', color) end
function trading1(object, color) moveWorkersToAction('trading1', color) end
function trading2(object, color) moveWorkersToAction('trading2', color) end
function trading3(object, color) if moveWorkersToAction('trading3', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function sailing1a(object, color) moveWorkersToAction('sailing1a', color) end
function sailing2a(object, color) moveWorkersToAction('sailing2a', color) end
function sailing3a(object, color) if moveWorkersToAction('sailing3a', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function sailing4(object, color) moveWorkersToAction('sailing4', color) end
function sailing1b(object, color) moveWorkersToAction('sailing1b', color) end
function sailing2b(object, color) moveWorkersToAction('sailing2b', color) end
function sailing3b(object, color) if moveWorkersToAction('sailing3b', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function sailing4b(object, color) moveWorkersToAction('sailing4b', color) end
function sailing5b(object, color) moveWorkersToAction('sailing5b', color) end
function sailing1c(object, color) moveWorkersToAction('sailing1c', color) end
function sailing2c(object, color) moveWorkersToAction('sailing2c', color) end
function sailing3c(object, color) if moveWorkersToAction('sailing3c', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function sailing4c(object, color) moveWorkersToAction('sailing4c', color) end
function sailing5c(object, color) moveWorkersToAction('sailing5c', color) end
function occupation1a(object, color) if moveWorkersToAction('occupation1a', color) and not norwegiansEnabled and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function occupation2a(object, color) moveWorkersToAction('occupation2a', color) end
function occupation3a(object, color) if moveWorkersToAction('occupation3a', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function occupation4(object, color) moveWorkersToAction('occupation4', color) end
function occupation5(object, color) moveWorkersToAction('occupation5', color) end
function occupation1b(object, color) moveWorkersToAction('occupation1b', color) end
function occupation2b(object, color) if moveWorkersToAction('occupation2b', color) and norwegiansEnabled and state.usingAutoDeal then dealToPlayer(color, 2, masterJobsDeck) end end
function occupation3b(object, color) if moveWorkersToAction('occupation3b', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end

opportunities = {
    boarDomestication={guid='303d7b', board={0.0, 0.15, 0.0}, column=1},
    lostSheep={guid='1a0c0a', board={0.0, 0.15, 0.0}, column=1},
    riverTrade={guid='093f69', board={0.0, 0.15, 0.0}, column=1},
    shipwreck={guid='c5199b', board={0.0, 0.15, 0.0}, column=1},
    sharkHunt={guid='ccbe53', board={0.0, 0.15, 0.0}, column=2},
    whalersRaid={guid='5e2c07', board={0.0, 0.15, 0.0}, column=2},
    ambush1={guid='e0c599', board={0.0, 0.15, 0.0}, column=2},
    ambush2={guid='38fd9f', board={0.0, 0.15, 0.0}, column=2},
    treasureHunt1={guid='cd621b', board={0.0, 0.15, 0.0}, column=3},
    treasureHunt2={guid='b7481c', board={0.0, 0.15, 0.0}, column=3},
    weaponStash={guid='d24837', board={0.0, 0.15, 0.0}, column=3},
    silkTrade={guid='3184f6', board={0.0, 0.15, 0.0}, column=3},
    bearHunt={guid='04d29f', board={0.0, 0.15, 0.0}, column=4},
    wolfHunt={guid='d56dad', board={0.0, 0.15, 0.0}, column=4},
    foreignMason={guid='5e43b0', board={0.0, 0.15, 0.0}, column=4},
    foreignShipwright={guid='d36230', board={0.0, 0.15, 0.0}, column=4},
}

function boarDomestication(object, color) moveWorkersToAction('boarDomestication', color) end
function lostSheep(object, color) moveWorkersToAction('lostSheep', color) end
function riverTrade(object, color) moveWorkersToAction('riverTrade', color) end
function shipwreck(object, color) if moveWorkersToAction('shipwreck', color) and state.usingAutoDeal then dealToPlayer(color, 2, swordDeck) end end
function sharkHunt(object, color) moveWorkersToAction('sharkHunt', color) end
function whalersRaid(object, color) moveWorkersToAction('whalersRaid', color) end
function ambush1(object, color) moveWorkersToAction('ambush1', color) end
function ambush2(object, color) moveWorkersToAction('ambush2', color) end
function treasureHunt1(object, color) if moveWorkersToAction('treasureHunt1', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function treasureHunt2(object, color) if moveWorkersToAction('treasureHunt2', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function weaponStash(object, color) if moveWorkersToAction('weaponStash', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) dealToPlayer(color, 6, swordDeck) end end
function silkTrade(object, color) if moveWorkersToAction('silkTrade', color) and state.usingAutoDeal then dealToPlayer(color, 1, masterJobsDeck) end end
function bearHunt(object, color) moveWorkersToAction('bearHunt', color) end
function wolfHunt(object, color) moveWorkersToAction('wolfHunt', color) end
function foreignMason(object, color) moveWorkersToAction('foreignMason', color) end
function foreignShipwright(object, color) moveWorkersToAction('foreignShipwright', color) end
